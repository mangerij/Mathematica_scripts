(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    305455,       6227]
NotebookOptionsPosition[    301024,       6089]
NotebookOutlinePosition[    301359,       6104]
CellTagsIndexPosition[    301316,       6101]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.6421782055259733`*^9, 3.642178220634665*^9}}],

Cell[CellGroupData[{

Cell["Notes on J. of Comp. Phys. 228 (2009) 8712\[Dash]8725", "Title",
 CellChangeTimes->{{3.642179539214714*^9, 3.6421795606964893`*^9}}],

Cell[CellGroupData[{

Cell["Preliminaries", "Section",
 CellChangeTimes->{{3.642179563906163*^9, 3.642179575419971*^9}}],

Cell[TextData[{
 "We start by considering sums of the form:\n",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    SubscriptBox["x", "i"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ") = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"j", "=", "1"}], "N"], 
       RowBox[{"K", "(", 
        SubscriptBox["x", "i"]}]}], ",", 
      SubscriptBox["y", "j"]}], ")"}], 
    SubscriptBox["\[Sigma]", "j"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " for i = 1, ..., N\nin ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", we can write this as"
}], "Text",
 CellChangeTimes->{{3.642177654714695*^9, 3.642177719795155*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"xi_", ",", "N0_"}], "]"}], ":=", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"j", "=", "1"}], "N0"], 
    RowBox[{
     RowBox[{"Ke", "[", 
      RowBox[{"xi", ",", 
       RowBox[{"y", "[", "j", "]"}]}], "]"}], 
     RowBox[{"\[Sigma]", "[", "j", "]"}]}]}]}], ";", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"example", " ", "for", " ", "N0"}], " ", "=", " ", "5"}], "*)"}], 
  " ", 
  RowBox[{"f", "[", 
   RowBox[{"xi", ",", "5"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.64217772167369*^9, 3.6421778079576607`*^9}, {
  3.642178062894092*^9, 3.642178113929916*^9}}],

Cell[TextData[{
 "for some observation points xi = ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "=x[i] and source points ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Sigma]", "j"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "= \[Sigma][j]. The kernel is denoted by Ke. We implement a low-rank \
approximation to the kernel as"
}], "Text",
 CellChangeTimes->{{3.6421778245965433`*^9, 3.642177863639998*^9}, {
  3.642177922248871*^9, 3.642177934136787*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"LowRankKe", "[", 
    RowBox[{"x_", ",", "y_", ",", "n_"}], "]"}], ":=", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"l", "=", "1"}], "n"], 
    RowBox[{
     RowBox[{"u", "[", 
      RowBox[{"l", ",", "x"}], "]"}], 
     RowBox[{"\[Nu]", "[", 
      RowBox[{"l", ",", "y"}], "]"}]}]}]}], ";", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"example", " ", "for", " ", "n"}], " ", "=", " ", "3"}], "*)"}], 
  RowBox[{"LowRankKe", "[", 
   RowBox[{"x", ",", "y", ",", "3"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.642177937541174*^9, 3.6421779654792547`*^9}, {
  3.6421780097435093`*^9, 3.6421780588480787`*^9}, {3.642178118766315*^9, 
  3.642178122724346*^9}, {3.642178273621438*^9, 3.6421782946789217`*^9}}],

Cell["\<\
Substitution of the above equation into our first equation, yields\
\>", "Text",
 CellChangeTimes->{{3.64217798489246*^9, 3.642177997443727*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"LowRankf", "[", 
   RowBox[{"xi_", ",", "n_", ",", "N0_"}], "]"}], ":=", 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"l", "=", "1"}], "n"], 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"j", "=", "1"}], "N0"], 
    RowBox[{
     RowBox[{"u", "[", 
      RowBox[{"l", ",", "xi"}], "]"}], 
     RowBox[{"\[Nu]", "[", 
      RowBox[{"l", ",", 
       RowBox[{"y", "[", "j", "]"}]}], "]"}], 
     RowBox[{"\[Sigma]", "[", "j", "]"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.642177999388433*^9, 3.642178001647852*^9}, {
  3.642178128318385*^9, 3.642178202175187*^9}}],

Cell["\<\
To implement the above equation, we need to first transform our source \
functions\
\>", "Text",
 CellChangeTimes->{{3.642178303827764*^9, 3.6421783408829412`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"W", "[", 
   RowBox[{"l_", ",", "N0_"}], "]"}], ":=", 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"j", "=", "1"}], "N0"], 
   RowBox[{
    RowBox[{"\[Nu]", "[", 
     RowBox[{"l", ",", 
      RowBox[{"y", "[", "j", "]"}]}], "]"}], 
    RowBox[{"\[Sigma]", "[", "j", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.6421783449331217`*^9, 3.642178370641346*^9}, {
  3.6421784196803513`*^9, 3.6421784216338577`*^9}}],

Cell["\<\
Next, we compute our low rank f(x) at each observation point with our \
transformed source\
\>", "Text",
 CellChangeTimes->{{3.64217839645324*^9, 3.642178411068244*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"TransformedLowRankf", "[", 
   RowBox[{"xi_", ",", "n_", ",", "N0_"}], "]"}], ":=", 
  RowBox[{"Sum", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"u", "[", 
      RowBox[{"l", ",", "xi"}], "]"}], "*", 
     RowBox[{"W", "[", 
      RowBox[{"l", ",", "N0"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"l", ",", "1", ",", "n"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.642178426871674*^9, 3.6421784741338797`*^9}}],

Cell[TextData[{
 "Consider a function g(x) on a closed interval [-1,1]. This function could \
be ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", Cos[x], 5x, ect. An n-point interpolant that approximates g(x) can be \
expressed as"
}], "Text",
 CellChangeTimes->{{3.642178582842255*^9, 3.642178640441551*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"p", "[", 
   RowBox[{"n_", ",", "x_"}], "]"}], ":=", 
  RowBox[{"Sum", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"x", "[", "l", "]"}], "]"}], 
     RowBox[{"w", "[", 
      RowBox[{"l", ",", "x"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"l", ",", "1", ",", "n"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.642178643613901*^9, 3.642178680570219*^9}, {
  3.642178712522724*^9, 3.642178713171719*^9}}],

Cell[TextData[{
 "for example, 4-point interpolation of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " with weighting functions ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["w", "l"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ":"
}], "Text",
 CellChangeTimes->{{3.642178725263476*^9, 3.642178734226882*^9}, {
  3.642178774778956*^9, 3.642178784712226*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"g", "[", "x_", "]"}], ":=", 
   SuperscriptBox["x", "2"]}], ";", 
  RowBox[{"p", "[", 
   RowBox[{"4", ",", "x"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6421786845547457`*^9, 3.642178706510738*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"w", "[", 
    RowBox[{"1", ",", "x"}], "]"}], " ", 
   SuperscriptBox[
    RowBox[{"x", "[", "1", "]"}], "2"]}], "+", 
  RowBox[{
   RowBox[{"w", "[", 
    RowBox[{"2", ",", "x"}], "]"}], " ", 
   SuperscriptBox[
    RowBox[{"x", "[", "2", "]"}], "2"]}], "+", 
  RowBox[{
   RowBox[{"w", "[", 
    RowBox[{"3", ",", "x"}], "]"}], " ", 
   SuperscriptBox[
    RowBox[{"x", "[", "3", "]"}], "2"]}], "+", 
  RowBox[{
   RowBox[{"w", "[", 
    RowBox[{"4", ",", "x"}], "]"}], " ", 
   SuperscriptBox[
    RowBox[{"x", "[", "4", "]"}], "2"]}]}]], "Output",
 CellChangeTimes->{{3.642178687855994*^9, 3.642178714407566*^9}}]
}, Open  ]],

Cell["\<\
Now we can approximate the kernel with the above interpolation formula. First \
fix the variable y and treat the kernel as a function of x\
\>", "Text",
 CellChangeTimes->{{3.642178816515574*^9, 3.642178838062359*^9}, {
  3.6421789108582573`*^9, 3.6421789133157463`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Ker", "[", 
    RowBox[{"x_", ",", "y_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Ke", "[", 
       RowBox[{
        RowBox[{"x", "[", "l", "]"}], ",", "y"}], "]"}], 
      RowBox[{"w", "[", 
       RowBox[{"l", ",", "x"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"l", ",", "1", ",", "n"}], "}"}]}], "]"}]}], ";", " ", 
  RowBox[{"ClearAll", "[", "Ker", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.642178840675132*^9, 3.6421788823082237`*^9}, {
  3.64217894121275*^9, 3.6421789461201763`*^9}}],

Cell["We then use the interpolation formula again to get", "Text",
 CellChangeTimes->{{3.642178919306505*^9, 3.642178930430706*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Ker", "[", 
   RowBox[{"x_", ",", "y_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Sum", "[", 
   RowBox[{
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Ke", "[", 
        RowBox[{
         RowBox[{"x", "[", "l", "]"}], ",", 
         RowBox[{"y", "[", "m", "]"}]}], "]"}], 
       RowBox[{"w", "[", 
        RowBox[{"l", ",", "x"}], "]"}], 
       RowBox[{"w", "[", 
        RowBox[{"m", ",", "y"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"l", ",", "1", ",", "n"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", "1", ",", "n"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6421789319199467`*^9, 3.642178992683441*^9}}],

Cell[TextData[{
 "This can indeed be checked again to verify that it is a low-rank \
representation of the kernel K(x,y) with\n",
 Cell[BoxData[
  FormBox[
   SubscriptBox["u", "l"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "(x) = ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["w", "l"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "(x) and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Nu]", "l"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "(y) = Sum[K(x[l],y[m]),{m,1,n}]. Note that any interpolation scheme can be \
used to construct a low-rank approximation, we can turn to the Chebyshev \
polynomials. They will serve as the interpolation basis with their roots as \
the interpolation nodes. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " implements the Chebyshev polynomials as ChebyshevT[n,x] (first-kind and \
order n), ie"
}], "Text",
 CellChangeTimes->{{3.642179003738039*^9, 3.642179158859456*^9}, {
  3.642179198014583*^9, 3.6421792199768257`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ChebyshevT", "[", 
  RowBox[{"2", ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.642179162252542*^9, 3.642179175146467*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1"}], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["x", "2"]}]}]], "Output",
 CellChangeTimes->{{3.642179167024432*^9, 3.64217917553016*^9}}]
}, Open  ]],

Cell[TextData[{
 "Note that the domain of ChebyshevT[n,x] for x = Cos[\[Theta]], \[Theta] \
\[Element] [0,2\[Pi]] is closed on ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["T", "n"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "[x] \[Element] [-1,1]:"
}], "Text",
 CellChangeTimes->{{3.6421792328106823`*^9, 3.642179293062112*^9}, {
  3.642179330547748*^9, 3.642179336085803*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ChebyshevT", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "]"}], ",", 
     RowBox[{"ChebyshevT", "[", 
      RowBox[{"2", ",", 
       RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "]"}], ",", 
     RowBox[{"ChebyshevT", "[", 
      RowBox[{"3", ",", 
       RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", 
     RowBox[{
      RowBox[{"-", "2"}], "\[Pi]"}], ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", "\"\<Expressions\>\""}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Blue", ",", 
        RowBox[{"Dashing", "[", "Tiny", "]"}], ",", 
        RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Blue", ",", 
        RowBox[{"Dashing", "[", "Large", "]"}], ",", 
        RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Blue", ",", 
        RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.64217925097469*^9, 3.642179263319672*^9}, {
  3.6421792948484364`*^9, 3.642179313111794*^9}, {3.642180157968636*^9, 
  3.642180228929058*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Directive[
        Opacity[1.], 
        AbsoluteThickness[1.6], 
        RGBColor[0, 0, 1], 
        Dashing[Tiny], 
        Thickness[0.0025]], 
       LineBox[CompressedData["
1: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
        "]]}, {
       Directive[
        Opacity[1.], 
        AbsoluteThickness[1.6], 
        RGBColor[0, 0, 1], 
        Dashing[Large], 
        Thickness[0.0025]], 
       LineBox[CompressedData["
1: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
Tg7eJgbnwpyXPm3i4P/9fwb4//8/w/8B4m8CkA==
        "]]}, {
       Directive[
        Opacity[1.], 
        AbsoluteThickness[1.6], 
        RGBColor[0, 0, 1], 
        Thickness[0.0025]], 
       LineBox[CompressedData["
1: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
TW4alQ==
        "]]}}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None}, PlotRange -> 
     NCache[{{(-2) Pi, 2 Pi}, {-0.999999512971478, 
        0.9999999999999671}}, {{-6.283185307179586, 
       6.283185307179586}, {-0.999999512971478, 0.9999999999999671}}], 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
       RowBox[{
         SubscriptBox["T", "1"], "(", 
         RowBox[{"cos", "(", "\[Theta]", ")"}], ")"}], 
       RowBox[{
         SubscriptBox["T", "2"], "(", 
         RowBox[{"cos", "(", "\[Theta]", ")"}], ")"}], 
       RowBox[{
         SubscriptBox["T", "3"], "(", 
         RowBox[{"cos", "(", "\[Theta]", ")"}], ")"}]}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Tiny], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Tiny], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Large], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Large], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Dashing", "[", "Tiny", "]"}], ",", 
                   RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Dashing", "[", "Large", "]"}], ",", 
                   RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}]}], 
             "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm], ",", 
               TagBox[#3, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.642179263690648*^9, 3.642179313478677*^9, {3.64218017709328*^9, 
   3.642180229465177*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Roots:", "Subsection",
 CellChangeTimes->{{3.642179598550672*^9, 3.6421795990936003`*^9}}],

Cell[TextData[{
 "The roots of the Chebyshev polynomials are located at specific points. ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["T", "n"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "(x)  has n roots located at "
}], "Text",
 CellChangeTimes->{{3.6421794011801863`*^9, 3.6421794389030657`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ChebyshevT", "[", 
     RowBox[{"1", ",", 
      RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "]"}], "\[Equal]", "0"}], ",", 
   "\[Theta]"}], "]"}]], "Input",
 CellChangeTimes->{{3.642179442058612*^9, 3.6421795138584414`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         FractionBox["\[Pi]", "2"]}], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        FractionBox["\[Pi]", "2"], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.64217946901306*^9, 3.642179514246984*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ChebyshevT", "[", 
     RowBox[{"2", ",", 
      RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "]"}], "\[Equal]", "0"}], ",", 
   "\[Theta]"}], "]"}]], "Input",
 CellChangeTimes->{3.642179526004965*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         FractionBox[
          RowBox[{"3", " ", "\[Pi]"}], "4"]}], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         FractionBox["\[Pi]", "4"]}], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        FractionBox["\[Pi]", "4"], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        FractionBox[
         RowBox[{"3", " ", "\[Pi]"}], "4"], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.642179526348915*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ChebyshevT", "[", 
     RowBox[{"3", ",", 
      RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "]"}], "\[Equal]", "0"}], ",", 
   "\[Theta]"}], "]"}]], "Input",
 CellChangeTimes->{3.642179604583293*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         FractionBox[
          RowBox[{"5", " ", "\[Pi]"}], "6"]}], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         FractionBox["\[Pi]", "2"]}], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         FractionBox["\[Pi]", "6"]}], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        FractionBox["\[Pi]", "6"], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        FractionBox["\[Pi]", "2"], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        FractionBox[
         RowBox[{"5", " ", "\[Pi]"}], "6"], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.642179605052683*^9}]
}, Open  ]],

Cell[TextData[{
 "Clearly, this follows a pattern. ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Theta]", "m"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " = ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"2", "m"}], "-", "1"}], ")"}], "\[Pi]"}], 
    RowBox[{"2", "n"}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " for m = 1, ..., n"
}], "Text",
 CellChangeTimes->{{3.642179609602952*^9, 3.642179649490087*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Extrema:", "Subsection",
 CellChangeTimes->{{3.6421797304011917`*^9, 3.6421797356160593`*^9}}],

Cell["We can also find the extrema of these functions. ", "Text",
 CellChangeTimes->{{3.6421797380008*^9, 3.642179750485611*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"ChebyshevT", "[", 
       RowBox[{"1", ",", 
        RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "]"}], ",", "\[Theta]"}], 
     "]"}], "\[Equal]", "0"}], ",", "\[Theta]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6421797545166893`*^9, 3.642179795222795*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{"2", " ", "\[Pi]", " ", 
        RowBox[{"C", "[", "1", "]"}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{"\[Pi]", "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6421797827294083`*^9, 3.642179795636039*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"ChebyshevT", "[", 
       RowBox[{"2", ",", 
        RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "]"}], ",", "\[Theta]"}], 
     "]"}], "\[Equal]", "0"}], ",", "\[Theta]"}], "]"}]], "Input",
 CellChangeTimes->{3.642179812075782*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{"2", " ", "\[Pi]", " ", 
        RowBox[{"C", "[", "1", "]"}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         FractionBox["\[Pi]", "2"]}], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        FractionBox["\[Pi]", "2"], "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{"\[Pi]", "+", 
        RowBox[{"2", " ", "\[Pi]", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"C", "[", "1", "]"}], "\[Element]", "Integers"}]}], "]"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.642179812505123*^9}]
}, Open  ]],

Cell[TextData[{
 "\[Theta] follows ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"m", " ", "\[Pi]"}], "n"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["T", "n"], " ", "=", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "m"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " for m = 0, ..., n"
}], "Text",
 CellChangeTimes->{{3.642179856843136*^9, 3.642179891234058*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interpolation scheme", "Section",
 CellChangeTimes->{{3.64218008788485*^9, 3.642180092241888*^9}}],

Cell[TextData[{
 "We now use the Chebyshev nodes(set of all roots and extrema of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["T", "n"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "(x)) as our interpolation nodes, the approximating polynomial ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["p", 
    RowBox[{"n", "-", "1"}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "(x) to the function g(x) can be expressed as a sum of the Chebyshev \
polynomials."
}], "Text",
 CellChangeTimes->{{3.64218009605442*^9, 3.642180152425297*^9}, 
   3.64218031378006*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"p", "[", 
   RowBox[{"n_", ",", "x_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{
    FractionBox["1", "n"], 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{"g", "[", 
       RowBox[{"x", "[", 
        RowBox[{"n", ",", "l"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"l", ",", "1", ",", "n"}], "}"}]}], "]"}]}], "+", 
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        FractionBox["2", "n"], 
        RowBox[{"Sum", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"g", "[", 
            RowBox[{"x", "[", 
             RowBox[{"n", ",", "l"}], "]"}], "]"}], 
           RowBox[{"ChebyshevT", "[", 
            RowBox[{"k", ",", 
             RowBox[{"x", "[", 
              RowBox[{"n", ",", "l"}], "]"}]}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"l", ",", "1", ",", "n"}], "}"}]}], "]"}]}], ")"}], 
      RowBox[{"ChebyshevT", "[", 
       RowBox[{"k", ",", "x"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "1", ",", 
       RowBox[{"n", "-", "1"}]}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.642180390611114*^9, 3.642180512286392*^9}, {
  3.6421807947809677`*^9, 3.642180824558135*^9}, {3.642180862998621*^9, 
  3.642180863364237*^9}}],

Cell[TextData[{
 "where x[n, l ] are the roots of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["T", "n"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "[x]. Note that these roots are well-known and have closed form expressions \
"
}], "Text",
 CellChangeTimes->{{3.642180523821107*^9, 3.642180554031066*^9}, 
   3.642180644072631*^9, {3.642180746811818*^9, 3.642180800576572*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"xroots", "[", 
    RowBox[{"n_", ",", "l_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"2", "l"}], "-", "1"}], 
      RowBox[{"2", "n"}]], "\[Pi]"}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"yroots", "[", 
    RowBox[{"n_", ",", "l_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"2", "l"}], "-", "1"}], 
      RowBox[{"2", "n"}]], "\[Pi]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.642180784002173*^9, 3.642180792020607*^9}, {
  3.642180831022829*^9, 3.642180851985339*^9}, {3.6421836548924723`*^9, 
  3.642183659302693*^9}}],

Cell["Rearranging the above, we have", "Text",
 CellChangeTimes->{{3.642180959288445*^9, 3.642180961705832*^9}, {
  3.642181084702792*^9, 3.642181090331255*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"p", "[", 
   RowBox[{"n_", ",", "x_"}], "]"}], ":=", 
  RowBox[{"Sum", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"xroots", "[", 
       RowBox[{"n", ",", "l"}], "]"}], "]"}], 
     RowBox[{"(", 
      RowBox[{
       FractionBox["1", "n"], "+", 
       RowBox[{
        FractionBox["2", "n"], 
        RowBox[{"Sum", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ChebyshevT", "[", 
            RowBox[{"k", ",", 
             RowBox[{"xroots", "[", 
              RowBox[{"n", ",", "l"}], "]"}]}], "]"}], 
           RowBox[{"ChebyshevT", "[", 
            RowBox[{"k", ",", "x"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"k", ",", "1", ",", 
            RowBox[{"n", "-", "1"}]}], "}"}]}], "]"}]}]}], ")"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"l", ",", "1", ",", "n"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6421809635580063`*^9, 3.642181077978263*^9}}],

Cell[TextData[{
 "Can now look at the interpolation of some function. Let\[CloseCurlyQuote]s \
use ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"g", "(", "x", ")"}], "=", 
    SuperscriptBox["x", "5"]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.642181198637412*^9, 3.6421812091269703`*^9}, {
  3.642182093253862*^9, 3.642182098076359*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"g", "[", "x_", "]"}], ":=", 
     SuperscriptBox["x", "4"]}], ";", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"p", "[", 
         RowBox[{"8", ",", "x"}], "]"}], ",", 
        RowBox[{"p", "[", 
         RowBox[{"7", ",", "x"}], "]"}], ",", 
        SuperscriptBox["x", "4"]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "0.00055"}], "}"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Dashing", "[", "Tiny", "]"}], ",", 
           RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Dashing", "[", "Large", "]"}], ",", 
           RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Red", ",", 
           RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}]}], "}"}]}], ",", 
      RowBox[{"ImageSize", "\[Rule]", "700"}], ",", 
      RowBox[{"PlotLegends", "\[Rule]", "\"\<Expressions\>\""}], ",", 
      RowBox[{"AxesOrigin", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{
          RowBox[{"-", "1"}], "*", 
          SuperscriptBox["10", 
           RowBox[{"-", "14"}]]}]}], "}"}]}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"g", "[", "x_", "]"}], ":=", 
     RowBox[{"Exp", "[", 
      RowBox[{"-", 
       SuperscriptBox["x", "2"]}], "]"}]}], ";", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"p", "[", 
         RowBox[{"3", ",", "x"}], "]"}], ",", 
        RowBox[{"p", "[", 
         RowBox[{"4", ",", "x"}], "]"}], ",", 
        RowBox[{"Exp", "[", 
         RowBox[{"-", 
          SuperscriptBox["x", "2"]}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "0.5"}], "}"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Dashing", "[", "Tiny", "]"}], ",", 
           RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Dashing", "[", "Large", "]"}], ",", 
           RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Red", ",", 
           RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}]}], "}"}]}], ",", 
      RowBox[{"ImageSize", "\[Rule]", "700"}], ",", 
      RowBox[{"PlotLegends", "\[Rule]", "\"\<Expressions\>\""}], ",", 
      RowBox[{"AxesOrigin", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{
          RowBox[{"-", "1"}], "*", 
          SuperscriptBox["10", 
           RowBox[{"-", "14"}]]}]}], "}"}]}]}], "]"}]}]}], "}"}]], "Input",
 CellChangeTimes->{{3.642181104785368*^9, 3.642181297675593*^9}, {
  3.642181348046371*^9, 3.642181387901865*^9}, {3.642181454727722*^9, 
  3.642181488015273*^9}, {3.642181618144699*^9, 3.6421816460640078`*^9}, {
  3.642182886955316*^9, 3.6421828893915358`*^9}, {3.6421830196702423`*^9, 
  3.642183080530778*^9}, {3.642184159927926*^9, 3.6421841709593573`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{GraphicsBox[{{{}, {}, {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0, 0, 1], 
          Dashing[Tiny], 
          Thickness[0.0025]], 
         LineBox[CompressedData["
1:eJxF0gtM00cYAPAyBInPAV14RKAMBowBLUVt3e5KZzZUhloJGxgsYza8JARE
GWwMqW4p2LHxaAAFhM7yKBCkY4xSubqOMcdj4aFAVGBjAqVlyGNFHrqMTe/+
7pLL5Zfvy3fffTnX08mhMS/RaLTI//az87hTYNrdG0pIe7a8jCjElF1yvFrC
e+4II+q3us91ri7BXjKgfJmF1KK6FrvbgBbvlbM3FG3YBgOqeqq3NCluY7OM
aC1vx/KiYhT7sBEp3neJXVDoedR9LdXFSarStReG4Q215RKzQOq+h8Ku5Kvu
W7HtjWjqflhVBtgZSNWfX9AJXD62xh40oOJGGwuTlP7CLvVmelGhHTbfgBRz
PFa3yBFbN4tGYtW+TuecsONnkdg2sJftycBW6ZElfVlW85UrNk2Ppr7lqwts
3Ej+DNKe5eSnZbljF0yhhf4+3R1LD+z2P1D+rzdy/8n1xLaaRL7zXAv3ZS/S
3wOk7A1ZSm19ndS/h16tjx77Md2b9DeMyu275Tv93iDvHUL0XGbsyWliRg8S
bqkITkj2xRY3o8ElSVdGGmUVOjhxlpeb+b+92g6x63KIabVoJc7kMFNFuQnl
9QUbowcpX0eb6n2ilFHK36DUasZE9jjlYhSRtTpYaaB8Cbkxr7eP0/yIP0M3
izZyIvwppwDf7GmzeA7lS0CeOJCZDimXAsk7NcklRyhfBSdWBeHDH1GuAIaT
Sg9BEeVGEBkkk394hXId6GdfcEyuJBY3gdbtYbu+bqDcAMTazcd9nZRbgJ1r
+M+HTMR8NehSMYe0R5kkfguk8q0mApTE/NtgtvnUk3w/Fpn/EFi4Ns5r/4tY
/htoziqUXGT4k/8zCVKEQf3Bx4ivPASmPSrhRD0xSw86B/0ydKPE8QZQ9EVT
kcKcjR09B1jzDb8kCInjF4CD9HwUmxGA7b4C7ox03FQcJQ55DPJcze1eySSu
WAVBScHnJEpi2jqgaQoH1kaI7TdATPsODnfrXtLvE9CrzqnM4BIf/hvI2rKS
NsqI8zZB1JbCD06f2kfebw69ptYcul/ej33LEl4r8N12Zph4chu0HmgbtvqS
gw12Q60wbm4Xj4u9YQ3pHXqfE7QD2N/R4Zl6zZGC74mldjAxNlK2/dM3sX93
hImtAvXn/m9hc52hIjTJQzRD/IgBc36I6LygBNjmbjBBW8otjYLPLXZ+Da5d
rhn7041H5uMJtbUPeupmsMV8b3gxTFQUXRZI+veBn8RP/OTN5JP6TMhabGlU
SLF12f7Q3HnPAcE0sU0A9GmdHy97922cv7gXDtvMPhLJsfk9++F58N6yRoOt
O8aBtrHNK7vvkvgYB7bk267HzJN4HBeGatKfdlgcxF7nwn8BWeTTSA==
          "]]}, {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0, 0, 1], 
          Dashing[Large], 
          Thickness[0.0025]], 
         LineBox[CompressedData["
1:eJwt039Q02UcB/Av4oAQSX4UivJjMoGQXxsq3+nnGYszEywkzoCKEbGYonJo
YVJG0mlCaA22BAPN5ReJaf6Ik+GyGRXKJA6umJYC18V3DNgWOKZNoKP8Pk9/
PPe5170/9/y45z78wtKsogUURaU/XlzdGpKyb+BiK6LGGwTMCRZecB6s39p8
RPI4msgZYKHP6y4d2lzPWRctZ0Gp5tXwmls4D2V2szD1e5NohtFxppPqWTg9
Z/FwMjc53y90jIDrmI9jirnDubPiSxaYl8MUk4yFc6V7AgttzcdLLje4OFO+
m1hAOedamo64pXB59QEWRmRdpZ8LPDlTebMjwN7ddrocFmMfeJ0F+2RnZtg7
ftgfLTfD8fP+PGdNILbgFxbCtG4WeV0Q9qTQDIxVkmiUB2NntZvhtqIjLuTt
EOxaehQqA1J6RFHh2JtzRsEj0KE++wkfe+NeC7DfSDtq/SOwr4vGwLA3Wbmv
QoA9tGgCsjVu0YLUVdiaWxMw2fdz568ekdiPfGxgftVWOuhDHK62wqDFO8zs
T/yPygrG+bSKh6HEmgErnIk3ipcm/98fbIPsT7vaZNuJy1bb4PqLhubxbuLE
3TZQ9l6snq+OIvfJs0OcneYJHNHY0rVTsFJbMPjD/hhsk8QBTUuNmsXxq7FP
Pj0NgdUJilfMxO//Ng30zaLcP7Wx2Pf5D0C28GR6cWkc9u74h/CtaqYqVxiP
fSLjbwji59x43kn89XcueEvqNZzUmoC9Mm0Gxi7lzSrjE7FH6mdh8tSQ5Oo0
sSl4HvbINvWlZwixUz/7F5wrLsuGtcSHOyikOnxBxbiLsANvuKFE+7nuYhnx
5u4FaFlNWb4oPIm8N5mHKH1dv+s28T2TJ+rpqPqinF6DrVM8gdS6ipKZRuKa
Lm9ULvMcuTBHnKr0QfkL67IL89aSfIMvimZdy4xL1mEv/2MJOlUb573TROzj
F4D8+nUmr6PJ5LxnnkIG2Xarr4Qm/1kfhAKvWWJfosTYwVuC0U6tPq22nRj4
IWiX4jX1ovfWY79Jh6NdVzI7Dgk3kP3H+YjJKomUjxIfuxqBqr7P/fGDVsDu
6lmFig0NdEM+wu53RiHXx2cHbRESPE+9e2KQoeXera9GiQuoOPThNrmqoDEF
9985k4De3TH8U0yClLN0NFeIEqfazjM12J0ZZhFyD10hzjRjV+YfXINir9iH
Gp97FuftOeuQyX/sL7kGWyqPpVEZbHHo9djUDh2NAhSXHjw5gF0ZmSJGbcqA
R0V2kg/1ilGWfv/cNV4qzsVvrEf/AX5BmAg=
          "]]}, {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[1, 0, 0], 
          Thickness[0.0025]], 
         LineBox[CompressedData["
1:eJwB8QMO/CFib1JlAgAAAD4AAAACAAAATx0/ddOuqD01naD2s6fWNkzzf5ZP
pIY+KZ5483MKUDrOCNk4HqSWPnb6LxDoCZA6j5MFigWkpj4Ux+IfognQOu/Y
mzL5o7Y+JfQRKH8JEDuf++YG86PGPkT8PqxtCVA794wM8e+j1j603FruZAmQ
O6NVH2buo+Y+BiRqj2AJ0DuypJVtsJf3PmC8PLzQ6BI8PVeqppuGAT8zkL9P
egg3POJdxG+ZJAc/kdUjGkCCUTzj2VSfeDwNPzxd/angS2Y87O7AUB92ET+I
dXcqSrJ2PJWrEgXzihQ/t8qipUS9hTwfqQHmY5EXP/ps4Qqn1JI8o+o+MMhj
Gj/+RpMKJJqdPNVmty0dcx0/Oy7Pl2b0pjyAEz/KMicgP1dhswkPn7A8BhTx
k6WNIT/UqOJHkS23POOxQLeQEiM/c9QFyRAnwDy9cTePdX0kPw6JLFdihMU8
7s7LwNIGJj+9EdVECrzMPL5NvaToxyY/uqJxw0Nw0DyPzK6I/ognP9UCUwng
udI8XtzzRhE9KD80kAcsMhHVPC3sOAUk8Sg/4VyUbQef1zyoykzwcrQpP1Im
SJiJpdo8Iqlg28F3Kj/SNMaOKvTdPBSIL2ZZ5Cs/iM9uCVV44jxdBJxKaW8t
P4q8e23d6OY8FyFXxUfzLj9b7b/Y3ADsPOevXPqPLjA/kpHhHHO98Dzundw+
uPIwP/z/bP6iJPQ88xywXd2pMT/S4w1WBMT3PDDsqsdpXTI/BklkKGrF+zwZ
inReMiAzP/5ANP5vVQA9ALmRz/fVMz/hMb7E0uUCPZO2fW35mjQ/9m3MoGkB
Bj1eBJFWYlw1P3XnD6Iuagk9KOP3GcgQNj8J9CpnJPAMPZ2QLQpq1DY/rirI
8nmUED0Rz7bUCIs3P1OkjixfwBI9vV1n6g4+OD9i/FwxpBQVPRS75ixRADk/
Diy9rrnYFz1qqblJkLU5P0EeOhwpqho9a2Zbkwt6Oj8/6cBYh/4dPWu0ULeD
MTs/+SlO5SKwID2jUm0mY+U7P/cSRBwVeyI9h79Ywn6oPD9Zv4GGr5UkPWm9
lziXXj0/tz4Qd6y0Jj33iaXb6yM+PwEEZetZLyk9vabayaflPj+MAuXgrc8r
PYFUY5Jgmj8/khO0qwJxLj15aN3DKi9AP83+68HzvzA9MO+yq6OKQD+ekkiH
WkcyPQMeHDlQ5EA/k74ECX3gMz0stOzcmkVBP4pplTsdujU91BLn7WOgQT9t
xQPuL5E3PXQ8S/G5uUE/AXlNEdUZOD0TZq/0D9NBP5KztRTJpDg9so8T+GXs
QT8xEhWWEjI5PVK5d/u7BUI/GY+yPLjBOT0nUsA7
          "]]}}}, {
      DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0., -1.*^-14}, 
       DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}},
        FrameLabel -> {{None, None}, {None, None}}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImageSize -> 700, 
       Method -> {
        "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
         AbsolutePointSize[6], "ScalingFunctions" -> None}, 
       PlotRange -> {{0, 0.00055}, {-1.*^-14, 9.371981814741692*^-14}}, 
       PlotRangeClipping -> True, PlotRangePadding -> {{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.05], 
          Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
      FormBox[
       TemplateBox[{
         RowBox[{"p", "(", 
           RowBox[{"8", ",", "x"}], ")"}], 
         RowBox[{"p", "(", 
           RowBox[{"7", ",", "x"}], ")"}], 
         SuperscriptBox["x", "4"]}, "LineLegend", 
        DisplayFunction -> (FormBox[
          StyleBox[
           StyleBox[
            PaneBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Tiny], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Tiny], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Large], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Large], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
              "Grid"], Alignment -> Left, AppearanceElements -> None, 
             ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
             "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
           FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
           False], TraditionalForm]& ), 
        InterpretationFunction :> (RowBox[{"LineLegend", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"Dashing", "[", "Tiny", "]"}], ",", 
                    RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}], ",", 
                 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"Dashing", "[", "Large", "]"}], ",", 
                    RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}], ",", 
                 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}]}], 
               "}"}], ",", 
             RowBox[{"{", 
               RowBox[{
                 TagBox[#, HoldForm], ",", 
                 TagBox[#2, HoldForm], ",", 
                 TagBox[#3, HoldForm]}], "}"}], ",", 
             RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
             RowBox[{"LabelStyle", "\[Rule]", 
               RowBox[{"{", "}"}]}], ",", 
             RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
        Editable -> True], TraditionalForm], TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], ",", 
   TemplateBox[{GraphicsBox[{{{}, {}, {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0, 0, 1], 
          Dashing[Tiny], 
          Thickness[0.0025]], 
         LineBox[CompressedData["
1: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
          "]]}, {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0, 0, 1], 
          Dashing[Large], 
          Thickness[0.0025]], 
         LineBox[CompressedData["
1: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
          "]]}, {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[1, 0, 0], 
          Thickness[0.0025]], 
         LineBox[CompressedData["
1:eJwd03k01ekfB3CpwSiGqdRFI+sooYUmJt4IpUUpiZIlIaGoKEtNQoakshWR
fbuRpZLsxdiissUIX0JzL5cvQrL+Hr/nnOc85/XX5/M5788jeebiUVtuLi6u
WHKX3v22rMZytp7m4v8Pjf+emZyhGDLoDLP8tmSRla0hzxkqqFf4q2HJr0tv
OF2V08TvNRYhS1ZSW5MSy9DFLYcF1SVzrWaHLUoYIEfIonKBuJFTcstazhCl
pdfVlmxkU1tgHWmEb1dOR8wTq3/ckRPKMEaLynzbHLG0xpO0ihgTSHGdXrbk
VUy+uAkJM/zb7i08SzwhcjlSNukUtr0x55sh7vLtumsiZ4HYormBaWKb6aS3
FcZWqK8zZ34nblMy0zSPtAZzzPv4FHH54wrVu4yz2B82TwakodJ0LVf2lC0E
1lqUjRFn8CkplsbY4WbxjZ9GiUPdHsnQEg4QvMulzyHmyTwUH2B9Hnxl1lqD
xJ5fuMU3JjnCVd5XkrVU/7DzaiO5C/jykudRH3G7v9Q9tv1FpPWfU+wllut2
/OmNsQtOWN3J6CaOXiPpYxbpCh8TYZN/iX197lwLYlyB8zfJmw3EpeJ2+SaF
V3BAI+BAHfH0K60JqVNuAH/WfBWx08jkxaIYd7APqouUExufsrLnSHiAy9J8
fS5xyJR6SkG5Bx5mVDGyiGserO3zs/aEZfHYsgxijZo6iw1JXvC2Drodv9Sf
qqqJodwNDFVXWYUQW338JVy0+gasXHY9CiR+7DjY+NX+LwirOub7EfM1fkgt
M76JWO01aZ7E3rz+UqaRPkh+7WZmS3z2Cs0IZPgh38uHeyfxjuWhnnkuflgz
zhZTJuYOVfn8udoP2gFp6+SJ47I9YpTc/eFkLpXPIO4YXC7R0nQbQ6z192YX
aBy2Xi8jERyI3UfEc18T/zZa6LevLxCOIT10DjHnxukBV/UgnNs/K5ROHBST
mFrJCkLrE5WZCOLKti2bzusFo+Tm63MuxOqG2kovF0Jw01U6X4KYr6svpPv4
Peg1nRJdS9zmeJvmzboHszMcK37iwkpb0yzF+xD6WyRiYp6G6Rcmg6vzPk5q
h0ZVE4duUI1J2RWKtJ17Vp8j5gs3SBgdC0ffBc+60Dkas7t6ZxNEI/A0v9DZ
n3ik65rJsT0RSG+U/n6VuPn39JX54RFYs8K12Jz4SRGPu9cfkdCemxGSJVbp
q9jPc/0hKlYP9ebMkny2a06I8UUjwu8PmZczNI61tRo2bI2G4rZPwcnE+t7O
GTfMorGomfg5jFihKsailxkN540VCpeIp8xma1IPPcbqq1siFYmDfQpit4XF
wEP2bVjcDxqvPm7fu/e3OKxgK+xwmSb7xObs26IfBzGnkH/Mie240/YLX4hD
3gUZGBCLqIgZfi6JQ0j60H+SxEXvfJivlOLB9X3ol6bvNMSUz+ceeB8PnrnO
14rEHZPqZZcFEmF1tsW9aZL0y71ey04yEbpmy0eLiPMEJ8tNVRMhP+x4JIU4
6PfstxqnEzFXOVh1lVjdTLqKNysRETwpQWLEUcUrGx4fTMJ78T+dLSZIPr6d
HRV3kqFeejm+cZyGUI/cFvuEZEiMbml5SVy72/U6/6tkTJtVD0YRq0/9tNHo
SzLqeBPKrYnFHJRtu3elYJfGqODoGI1uw1v09EAKMp7o7OQlPisqv0JJKw1e
fJxcCZrGxdzLio8mMlD4fO7ij0GS7+7e5lo+JrwuhOe3EzvVGHrOijNhS/f2
vSI+R22qttBjYsP1uHE3YiuBHivZSCYY9lk9o2waRxwOhuf98RQG208u9rJo
bJWUna33zIQEtc0g9yuN8fufapYtywavhovkii/kf7+pKvuwOw+FHZd8Aj7R
cPAwEDDjvMCkYc9Tt1oab37evpjp/AoNVQZtmUU0UpMqF0RlC1EsYNO0yKSh
JVKSeOxZMXzbN9g0RtFQrO4sqNpcBm9dv+ZrATRatI6NZIyUY1VoktmAK5mH
37GpdetbPHmRsVnVnMa79hMlgiEVuDV3VnfFHrKP+qa9/f2V+FDQ/CJKnsbO
+Dsn4mWq4Nb6j52HII2ehbCWc39VY0fci2sBoyMYMPiQJFJRAx2XE8tEmkeQ
E0V5NErWgV9GVigsdwQpfy8P3OT5DqEKVgeF741g0ubkoF1RPWxq5cTcnUew
Uvf20dx178GzLn6Hz94ReAsNrOo1/wDbWJGKdKkRrCpV4Go79BGHxIS1NeaH
oeF+eL5i5iNMZirHdzYPIyY5OEk6phHO+8TzspjDsDiu0vDzgSZ8822yO359
GC9bbcNKp5qgEMcKOH94GGr1OdxfI5sxfflsq7n0MDbq2U2G6bag+LJpyd5x
DlRVVB+8+NqC1QIWmToVHFDjd2uT/FtReae2RCicA84OI3/G9k94U1qql2rJ
gdyQ4uCy5k945PRAP1mRg0oZtyYXnzbUPTt9SmdqCPdaWm2OyrRj0TX6hMeb
IdDHyh9wV7ZDhrnualnwEPKOr92j5vovzEo+d984OoSkBt/YL792oP7uj+xN
YkP4Xm3u9evbDshMKRcqdQ+i50HZpNCFz8j2G/A2ShjEVOOfjFuCnZD1t1bL
th+ES7hUuUdxJ16mD/nulx/EugYpoX6LLugdFhc4wGHjWGvmnPhCF95Nr/9a
ksPGuGWCUyezG8oSvTqmF9kos8r2FzxI4WqypXrsNjYKPzgd6DakYDA3tvbv
rWzka24WfmZEQW0xsP+SMhuZ4ikxh05QePex9eQ+RTai26OfB5+hIKoonzku
z4bbkdu9/B4Uzqut6dfdyIaC1mkN3lQKHfUjRZQgG3LZosvb0ilsU3CdrxFg
Q+q39prUpxQOPjy8PW8VG+vnjhrr51LYaa/g7sfPBk/BPkf/YgqSwUw7eR42
epVVopY3U7BSkRl2nmeh88mYRXMrhbCsp7Ymcyy0C2TLJLVTMHEtbNScZeH9
0KYcnW4K2enX/H75wUJxmkS1D5vC5sAK45wJFgpEuoKNOBSkf250ePSNhef+
0UclaQoJV7wu3RxngWmztrt8goIMlWtxZJSFlKampPvfKbzQ36Ozi2YhXvu+
g9UMBeq8N2PjCAsxOYeUt85T+LFo2c87zMJDiZWTi4uk38LRRHqIhf8Bzj0r
bw==
          "]]}}}, {
      DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0., -1.*^-14}, 
       DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}},
        FrameLabel -> {{None, None}, {None, None}}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImageSize -> 700, 
       Method -> {
        "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
         AbsolutePointSize[6], "ScalingFunctions" -> None}, 
       PlotRange -> {{0, 0.5}, {-1.*^-14, 1.}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.05], 
          Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
      FormBox[
       TemplateBox[{
         RowBox[{"p", "(", 
           RowBox[{"3", ",", "x"}], ")"}], 
         RowBox[{"p", "(", 
           RowBox[{"4", ",", "x"}], ")"}], 
         RowBox[{"exp", "(", 
           RowBox[{"-", 
             SuperscriptBox["x", "2"]}], ")"}]}, "LineLegend", 
        DisplayFunction -> (FormBox[
          StyleBox[
           StyleBox[
            PaneBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Tiny], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Tiny], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Large], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Large], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
              "Grid"], Alignment -> Left, AppearanceElements -> None, 
             ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
             "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
           FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
           False], TraditionalForm]& ), 
        InterpretationFunction :> (RowBox[{"LineLegend", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"Dashing", "[", "Tiny", "]"}], ",", 
                    RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}], ",", 
                 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"Dashing", "[", "Large", "]"}], ",", 
                    RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}], ",", 
                 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}]}], 
               "}"}], ",", 
             RowBox[{"{", 
               RowBox[{
                 TagBox[#, HoldForm], ",", 
                 TagBox[#2, HoldForm], ",", 
                 TagBox[#3, HoldForm]}], "}"}], ",", 
             RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
             RowBox[{"LabelStyle", "\[Rule]", 
               RowBox[{"{", "}"}]}], ",", 
             RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
        Editable -> True], TraditionalForm], TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}], "}"}]], "Output",\

 CellChangeTimes->{
  3.642181388290773*^9, {3.64218145520179*^9, 3.6421814579469643`*^9}, 
   3.642181488543674*^9, {3.642181623245119*^9, 3.642181646431076*^9}, 
   3.642182890162767*^9, {3.6421830202780046`*^9, 3.642183081567765*^9}, {
   3.6421841611395607`*^9, 3.642184171699128*^9}}]
}, Open  ]],

Cell["and errors as a function of x", "Text",
 CellChangeTimes->{{3.642181746793878*^9, 3.64218175016119*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"g", "[", "x_", "]"}], ":=", 
     SuperscriptBox["x", "4"]}], ";", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{
          RowBox[{"g", "[", "x", "]"}], "-", 
          RowBox[{"p", "[", 
           RowBox[{"6", ",", "x"}], "]"}]}], "]"}], ",", 
        RowBox[{"Abs", "[", 
         RowBox[{
          RowBox[{"g", "[", "x", "]"}], "-", 
          RowBox[{"p", "[", 
           RowBox[{"7", ",", "x"}], "]"}]}], "]"}], ",", 
        RowBox[{"Abs", "[", 
         RowBox[{
          RowBox[{"g", "[", "x", "]"}], "-", 
          RowBox[{"p", "[", 
           RowBox[{"8", ",", "x"}], "]"}]}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "4.5"}], "}"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Dashing", "[", "Tiny", "]"}], ",", 
           RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Dashing", "[", "Large", "]"}], ",", 
           RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}]}], "}"}]}], ",", 
      RowBox[{"ImageSize", "\[Rule]", "600"}], ",", 
      RowBox[{"PlotLegends", "\[Rule]", "\"\<Expressions\>\""}]}], "]"}]}], 
   ",", 
   RowBox[{
    RowBox[{
     RowBox[{"g", "[", "x_", "]"}], ":=", 
     RowBox[{"Exp", "[", 
      RowBox[{"-", 
       SuperscriptBox["x", "2"]}], "]"}]}], ";", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{
          RowBox[{"g", "[", "x", "]"}], "-", 
          RowBox[{"p", "[", 
           RowBox[{"6", ",", "x"}], "]"}]}], "]"}], ",", 
        RowBox[{"Abs", "[", 
         RowBox[{
          RowBox[{"g", "[", "x", "]"}], "-", 
          RowBox[{"p", "[", 
           RowBox[{"7", ",", "x"}], "]"}]}], "]"}], ",", 
        RowBox[{"Abs", "[", 
         RowBox[{
          RowBox[{"g", "[", "x", "]"}], "-", 
          RowBox[{"p", "[", 
           RowBox[{"8", ",", "x"}], "]"}]}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "4.5"}], "}"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Dashing", "[", "Tiny", "]"}], ",", 
           RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Dashing", "[", "Large", "]"}], ",", 
           RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Thickness", "[", "0.0025", "]"}]}], "}"}]}], "}"}]}], ",", 
      RowBox[{"ImageSize", "\[Rule]", "600"}], ",", 
      RowBox[{"PlotLegends", "\[Rule]", "\"\<Expressions\>\""}]}], "]"}]}]}], 
  "}"}]], "Input",
 CellChangeTimes->{{3.642181756062641*^9, 3.6421818688621817`*^9}, {
  3.642182213008829*^9, 3.6421822160968246`*^9}, {3.642182896973246*^9, 
  3.642182907697851*^9}, {3.642183096366392*^9, 3.6421831553943043`*^9}, {
  3.6421833728716297`*^9, 3.6421833989988194`*^9}, {3.6421841832938643`*^9, 
  3.6421842097034388`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{GraphicsBox[{{{}, {}, {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0, 0, 1], 
          Dashing[Tiny], 
          Thickness[0.0025]], 
         LineBox[CompressedData["
1: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
2+Mc8lnv1t8d5IJ+ajPOl9cvgLOietXTPdCvXJHenXsZ+Ycnzpwt9UF9EL/I
bL0fWEj3R9D7QHCtf8HGoWCK+YXumb/DsA/14D7JlWt4zyy25VeMMSSWJSof
qdLmjoM+fCH4044E3DcoS91JOgn5hN4zLx5OoZhP0x6uk4Z6a9lELrMMMPVZ
kwcOWdg36yafrOcDfL/KDYO1wTng4bn7+vF5yBe003HwTgH2ETIRd81/gvra
iKnVl88o9v3hveVDGVhZi/rAZDV4+EpD4+pr7BOUH2nE3EhiKaLQgO5Xnhbk
fb1+k4fIG3BZn9n2qGB6Mkee1GgcTQGbtsueUywCP7MszmB8Cmb9I9nV9ZzE
UkQH/8cMmaXg2vV7iOfKSSxK5EvPubCvEv2eYiLZVDWoby+/19f2msTyxN1a
2zYkN6A+pO+Oik0zif/797cjn5dEG/zlF1PyF9+i/0YE91BdB/onuG9yxnWR
WJao9pBd0+wj+jP3xfmL9KF+qX7906l+zDM8GfWt4gvqC0YZ+CKGkZ/BI0zv
xFcSEwjWNLShAt9JrECsuHH15fgP9HMJ/fv17BfyuD3xFQqcRH+L0pKR1gzy
7Gi/HMU1h35/y79VQwvgnt/us/nLyCvtPynqtQb/6PUup1WoGMj6WNrPeFZa
EssTlcQcG3rpGMh+qeVjS/cZSUwgzGraSrqxoF+3b8jm0AYSsxFzHC2T6djB
1Iv9bR0c8DOPMKVK5yaxFLGEu0fOgRd+bA9POsnwg532vb+zthV+dfV675uF
4Cdw8i39TWH4eY1qKViJgjsvNrvt2YN6MRr1B3Pi2CfsRl1vjRTqB7cps8bI
oP7Akyplk324z+eMaEOrA+gPij1l56CA/p1+Il5uh5G/7dzMNS9lsJtp9e3A
o/DjPBbzOEKDxKrEsv2mVXFaJFYmWojs7EjWhU7DOTucqY95OTQ1szmGuI/2
dAzdE2Pw1KApz0tT5E16t3N3zWkSyxIPVs4earZCfcjtWMteO+TdFWl2YcgR
93jrJRo87gx2t/+bOOUKP26j2uxFd/RXqF4vpfKEbiVj3sLojTzrhHb1b/QF
57LN/docgPrj/2r/bQvCvrO/rm/cHQpO7jffLh2BecTWXXIHo8DDL+fUlGPB
YTmvTTTjwXtuxTkZJGJee+hpX9Nb2O+Sx+5Y61S8F6/NfIZTOu5VqV/3xD0T
72WjFP/a5x50BkmLD0HZ6M/n3/Mt8hHm67MsLNzIx/5zS3VMtwux3+3xeL57
xWClHguJvOeoH23Yo/S0FHmvPV/QLy+HLnG/3uZ1JeZ13rhxqbUGfPmqZfj7
OuzP5yaW8qkR82osFnNHWuBnp9NQ8fMNdCaFhLcz7fAr3G01uPwefoabxadp
PpJYgbhAv0TD0of7pM81cHIMgJW/JuzkG8Q+Y++tDuwYgR5VK64lNob5Uk+W
zGXHoXdlNLooTGC+d2xioOof6AJ+Z25oT+M9as9J3Df8C93edPm5+QLeM/NQ
TavUMub18IUP0a5h341r2vM9BEayn+YX9vWPaRjJelB1j9BVOkZyf/ndO/In
GUksS5wNstXdxULi//7FYrvbdpWVxKJE26OT3h0bSaxATBcpuf6Ag8RsxG56
3wfe3PBnHT9SrsMLXa2FvmMbP/SAvDdjf7fCvzQ6YaVZCHknz59ivyMMXfT4
VlF3UehnpL4S1fYgb+rGvBO8EvDvnHZz/C0FnalrX0CtDPKrPF9JTNoHf9+k
2lynA8j77HJEtaIC5k2Y6HazH4a/8EGOibEj8LfY0kdVrgo9aSWD+7o6+O3A
WXEbTfjRV+1R2a+DPEqZUybMesjjdfWFyxcDEmsQi6z9Qp6ehD6uopIaboK8
QsKMRWZmmGdK965e0gJ841viJ5ozqG9tMp36aAM/2lxB+nw76ApRY3yBjvie
PJzzpQ2d8b081nHXEHXF/mMS8hYrF8ACbGsX2z1IrEY0mnp97f5l9F/vvJbh
5YP6pqfHn2v74T6Em5ytgoFgec9Pg7NByHfB+O5cUyg4V96eJT2CxErE4c3i
QheisB/v8vT+o7G4x4n+Up3N8dgv+pW/za8E6HV3VL1rkpB3JYDp+s0UsNyZ
9vuOacjnopxURsxAnuzt5u0bs+D/hVZo7Ot96Dxj35ZfPkS/XuPjjbG5yHst
5+JO68eYxzIewXuxCPnidt1ZH/IU9ZucnhJuluCeSblNMw9egnl/DoyVVGBe
+p6Z3sYq+Ak6M7zpqQXfz+evHq+H/85f0k+XmqDnimtkM7dhHwmX0yl87/A9
PylwjxbvxDzZP+EBih9wj1LJdPfjPfA/5FZ81uoT8lYWNZpc+Iz+I1P9WkFD
FO+zd1oxYRR+Gu700ve/ob+1mE/4+Q8SqxJ1Z/byNPzC99Epo878cRL+Jz3M
177NwL/n2YWphTnc3+xv2CjjEvJ+lkv7yLuKedaeT1r2EJjI/LWk4ZUCDYn/
+/3YP3XPghE8XbolMnAD+NKilF88O4lFiQsH1NyyOKH7+pjZPOUhsRTxX5mb
Ud0WEisQg5ZDj30QILEukU7htsLYNtRf8y2SnN8BZnlVL8QginnXV/s4N+8h
MRuRXXGSYbcEOMl/3crBvejfXMX7R0uWxBrEtH+Sw+b7wYJKRz+cP4h73As0
bfInYp5IjWv5dSUSKxMfUYUWZKrAX0w59e4TNRLLE4uCChNrj8FP5nVd+Htt
EssSS2j6fEaPI+9B1T/n/xqAX4XQnqEzIrESUal+syH3Kdz39TpJdVFz5FFT
Uz14wBL1LWGnxDWtkV+n0UXQ7Cz82+lDNjk7QDfUSKHzO0diNeLHiILFGBfk
N21+PXHnAuovrHSMXPHAPhGSg30ml1GfYf27Q84HeUturjSx++Feb5qYqv8E
gEeXeV60BeH7WJbYWfAoFDq7tdyDsAjwrpsqaTZRyKPUpJ+gFIv9jZctI/nj
Md9FwuXqUgI49Iyv18ckEhsQ0xIjXZ+lwP9ZY7JdfBr2a13KPu2Sgf5h8eeG
WlnYd8nqtZboA+TZmNihvC4HfqKNXw4M5yLf4aVfUlWP4W8kvrIzrQjvc96K
aav3UxJrEkMSeLiMSvDetxtE1su8xLziRVlatgrcr1lMZXmiEjxoqT/dXAP/
+RuW49l1yMfacH4wuBH+wotXPlq1oF5BLPIt8Q3qT1gm1/O2g51uZFfMd2Kf
q/XPnnZ9QH/yQm3ukx7sX7in427sJ+gNFl+Sz33GfT/H/7quMQS/v3XLYcKj
+D5ZFhj9qb8h7449PJe+jOPv75CFiHPFBIlViQbxsjYpf/BejnXKpp7TqA+c
19M/8Rf73NptqSG1AC44ff7w+mXkq4+7su/HKvr7X18TbyQwk3lm7taO+zRg
pt3ZW67SMZP9tp1+xm7BSOL/KuJqGQ+xoP7463YCzwYSCxLt5j7Pz24ksQbR
b9ev3x0c6E80X/5awI36vOuMA1G80Gtrubsc+OHf+1e49agg6idFZWuFtiMf
g7nyy3/CJFYibr2uV9QvSmJVornE1mN5e+Cf+ubXkLcE/D46V/ho7AVzsERt
4pZFvX7eqfyv+5AnVlP06LMD4NbxuYEgBfQzXKv31D8M/aho4gZBZfgFNVrn
/FYlsQGx2m7vkVfqqF9dR+iL0oTfwQdv3U11wF6q6cy79LDv85Fz9+cNwNNB
B4kNJ1EvKcTYnWiC+c41H11szEisR8y1yqaXtkD/t38emYQz6N+RoXLgnQ36
rRXZO9Pt0J8xMOjk7Ij6ft9CmkPOuP9mPv80Rlf0G5Vry/VcQH2C6Za32R54
z/bFcbtLl5FnfUrpPxUf1GvKhyez+6E+4uPJvUMBuF+9546WwiD0U3PNWPuH
ol7pec2ydgR0P8O4xC1R0MtmLMR/xCDv/A3xhtI41MtKr1iEJyDPhY6W+ZNJ
2LfALSVuRwr45waHXTO30S9auK+25g7YTnedWdxd+N379X7G4j72GYzOihZ/
CF1A7ILwyiP0m7UermzJByc7sRqnFGL+B8aBP/bF8GN/lBex7zn89DR8tq0r
hR7zTaPsfRnu0RLGfSLrFcX3LTL2060a3+/R+mchh19jfpBtMD9rA/yqaAxK
+ptwz5UsweN5rag/oPznm/db+HsOvQrU6ED+p4HRm7m7UD+51az4azd+XySq
dmk968W8cxYLI0H9yD9tzmUa+wX+Pmay7SnD0KlNDdQefIUeaeJWUfQdedmN
Y6UrflL8fpzMz2n8TWJtopBhi8D7KfjlGnxP/DwLP2l9OuYf89in7PiOq3+X
kF9ZV3mesIb6Fm2r8yxULOR9DLT8R7hpSaxE7DuWdmo7PYmliNYaZe8kmFjI
/j/Ueo4eXA92PzpXfpQN9UsqHNL6m0gsSAxSls4x5wIzHdETcNiM/huHXRIv
8pFYm8irGM0UsBV+WQq5gZFC4N2HmuZuCiPvQXnakfw9YE05pXev94I7ZSyO
vpMFm0r7lvftx7xhqdS9Ywfh7yhZ+nCKCJ4U7+ZfVSKxBtFLbDaBQRV+hD3s
TBzq2C9il1TgVk0wm6ju3G4d3DtZxNl5nx5YUDhy+MgJEhMIOdtzTHSMSGxA
lBJqeGtyCnqp4KiqrTlYaSt1uasl5jXxC+69Yg1dj0/xYdhZ7NPDa85/w4HE
ekSrzT4J6ecw7zt3MuMjF+znxlUS8OwC7rXA0fW3ygPzAjdNn2u9DH8Gdrbh
bh+8bxybhMmwH3SeDdpvfwXCP3O9k+piMFiUJaKMNhz1RUzZUmyRmCfPWJe9
JQb11fTDfDvjsI8GHSFBOgH17bQCjIpJYBMahYBjKfAfpDL9a5gGP3uC1zmr
DIrvdyr26/4s6HeGH1hueAC97H1F79hD6N11709U5uJ9p5//eHPzMXj9QyqN
80WYL5rMU6v6FP2q1yQV+Ergb+WjVjJTCt333Gmp1nL0J5t75GZVgp/qRO3w
qcH3+lYx645+Hfx+SL7k2dWIPHTb2m8QWvBeQuzfWHra4KdIsxZW+I7i72eW
gyq8E/3x3cp/5Xqg5zeecl3/CXpTqdv46AD8Rh+F21QMUvz93L4zkDCCvHzR
z43PjeF7k/dr61AeR7+hy4gW7wT8XS2X6qd+oz5Sb6NS8xS+/+wjomWZs9Br
pQ/Les1j/uftRgXHl3CfJY7zojtX4c9FF5K19g8sPZ/K1029/n9sSNT5/iTp
8ToSSxEdepvYQhlITCCEtHyJNGeGnlk+RyvLSmJBYkX++gDmjajvSd+xOLyJ
xBrE2dhDF8u4SKxNZAs0+BW/GbzngqO9Ix/81awDh5S2wt/6xC0zHiHo/qoF
H/7sQH+qXP3xxp3gEpH+5ju7Sfzf7yf3jIqnOPp/MzBV6kiBGZcE5YVlSCxP
3PFzf/GKHPqV+nXFuuShm785m513CP1elb6CwYokViUmFiakmh4BF2Xmckir
wq8tviaWUR33+RbUwzB0DH7UHn+CSrUxT+As3er14+g/aMR/2d4A9UbqslOK
JzGv4laqxgkT1G//Tsi0N4MeKW8/f8UC8ycj3ujGncG9jXplsu/b4j1f7Upd
LbXHvB0+hJNvnHDvyBa7/KHz4EneNzRzbshvfE7GjMkDeSrLU4oFLmPeDhYC
k4wPhZ+53Rl1P3yfU/ltpWaB8DNZlWZzC0aeSp0U+5Awinx3/lUmXwNH/T7L
9Tga86cV287XXIe/yXXp+g83KPJ9Seb7cRP5hKX+XVxLBkcHnm1lT6Pwa28V
2pmBeSbbpH0OZYGrLiR3HH8AFqldE7XNofBjPxvolYf3mbZu/RhdQOH3dK/k
3SfYv5ImOez5M7Cw4dpA8wsKv/u2cp/LKPLNtkRPv4JucnTvKF0Nhd/NW4e2
1FF8/2OrNyQbSaxHjNpn+0OlBd/DdFjLEZM38Df5KJXi3A7/yp23JgPf4z2F
vVbVb3Zjv+gmm4xHvRT78rTMveqneF9HKd3OL5hX9TLpwdgw/EWYVleWvuI+
0aY2hhvGSWxAnM5tzts+gfpTy5I08n8wr1oryVR7msRGRJG0lSdWfynyTVgz
XlpAnhmFZqtry/h7MY2RLE1fQ77qgZsbiqlYySwisWLXQEtiJWKMv3VlHz0r
2W/2bRPnHyYSGxFNt0qep2ElsTax2vVmHfdGEhsSd1YvbxHjQH8sm/VFJW4S
CxJnrZpaDHlJrEEM5P/z2pSfxKrE9X2cr6wESSxFTE1SKLHbDl3khE2hswj0
pxsic9x3YR+ltqK7XmKY1xbxMdVfEnlPHV1LCJGGPkYlHBMpBz/3Sq2wOHno
/3zcA5IOQY/en+KVpoj8PLNVF7KOgB8UjTnlqIKlz6+3LVAnsQGxcpfs6Wea
8NccMzUq0wF/zLp6vFoP+9pa5mg0nED+yS3vjrQZwc+35+/BzlN4P8abfLI9
5rh/kr6K+GdL+AuxOomMWmOfgpa4rT/Oov9Q+AueSQfUN6l83jh3DnkMCeuY
V1zQP1Sxh5baHflcvA1W6S9h/yU577n1XvALn874s+kK8nMUNnzf7I/6zHO/
hrZeRX5xUY5PwiHgstGDXXvCUa9298ybvZHwf386omF/DPJa8RZWEePwfUx0
fyhVSUC/V8LKk2NJ0Nfpbc87ngK+waJ5/2Qa9hVodks3y0Ce3NBbSWeyMG+/
cuV1+we4Z93aaMT5HOh65cxBF/Mwv/+y9BXvAvg5yp7yCHiC+8xNBpwPfYb9
gh5n20W9ILEecYPTG8v4Mvilicya3HoFFh3hNUivRv/zjCNa915jnrK5g+qj
Bsx7y3OdWNiMfc0+PN/3vA393+P7Jcvf4e/dQ5dmV00ndCrm3UKNH8CxjXpb
3vRgHm/IZY73n3CPgzK3Nj74DN1suIT18hDy+8Z3Mx8bhZ6mNMew5RuJTYgV
fzjpfo3jvfrvyNFUTSDfis5JQvwfzONf9Vi1nsZ+FmbP5ukWwHdezkzlroIr
HTb98SVsIO/zhVtmQpdmA9mP0GgwLki3gVwv6Ok+Ns0AXUn4xkgdM4mNiGe6
ngwmsZLYghgU3DHgsJHESsQs6am+gxwk/u/fz0NsPSzc8B+Ok/rweTN0aiW9
ziI+6Nv/uL4L2op5qneutxkKIb+tTmGziDCJ//v38srbhoWd4Pt5v1+37EZ9
nSlrTZo4+CujRKWLFObRvdQpV5IhsR5RxOF8Kfs+EssT1bhjno/Kg+0b8otL
DpFYgxhxqa0wQhF6zo6JfNMjJLYnNr1nzhVTRb7vQXserqmR2ITIIK11v/0Y
9F1DTneztHFfzbjIOx7HkdfpcO5tNQMSGxAjfzcn85zE/XPTx2/+MIbeos2Y
UGGK9/y5LBoXexrzWPI0Yqys8B5ipg6R0ja4hzZjRDitHfrPlz4M6XbAvrH2
jVdzzpHYlFjA9c3fxwX3fltP56t9Afn+eIh4C3iA2XaoeU56Yp7U+7MXa72h
6wWFuiX6gi/sfXDeLgB8Y7DOST4I+xZfH7VnCkW+TkXas/3hJDYnTv/abl0Q
iX3Z01UsA2Ogy2jbmBvE4T53TDv3nUnA/Zkcj2x0SwJfulz00z8F38Ng6NaG
mDTso5UYm5mWgTwlWas+eVn4vrc9cT5Z9gD3ja76JNmcg/r5N5pMPXm4r3X/
y9GxAuR7+0O06u8TEhsSDyzeSqF9Dr5PT++xqRT1bFyeukLleJ8rO76K7q3E
/DFpQxqlGszXP/J6QLcO9644Ll16uhH1Oy3u3nBuAd9wZjt/5Q36V30C1CPb
oTtc+70t5T30rlunVx52w/9wdlt3SS/eM/fZoSf1/bgn1+vcqK4veL+rHZvt
RobhN/ElQmn6K97T+Pc8L9U47le7Yvd3wwTyiDN3vxP4g/7kzUdzxadxPxrR
ZyEKf/G+Lvu2W2otgHtVbxwwXab4vTpBxeG4hu+jR0p+vpzARs6/vtTVVoWa
xNZE5cMPO1po2Mh+Xg2fFQ3WkdiFWKDDld9Lx0b2G+nS2XyGgcSGRB7z0LDv
jOjXHamYcWUmsRIxxGnWap6FxObEsqk9b/1ZSUwgTHrZHKJjI7EJUZhwOydm
I/KZhndycm5CfRwrU3AaB/ZpuHlkcjsX6lf4vE/ncUOXvl/UIr0Z/vZ7vu8v
44WeVrz1wRE+5O88YMzezI/8DDWxAXpbsT9Ro2HioyDq3d+tnrIUQn2OkVzj
2HbM+zzgLOsijP5NZ+/f/SuCeo2JT6x+osjjf3GTL+1u6GsX1X9e2IN+P48r
pl/EKPb1KGzWloDue2lEvkwS91q5xJ2zcy/8r3hqcd+UxnsseQaEUcui3+fy
07+ucuCly99sB/Yhj7fXli5Neey/4HVcpfQAia2IXt7BxcKHMH/e+8W2BAX0
e/r8jCMoIs+cz1aCy2H4XbpywvWTEr6v2SvhnzWUkcfDt1ynRAX3nfH9U7H9
KHR3v+1i8Wron/Yzvr2mjvkX/KOYnI9h3qR/lXevJvzcAma+q2mjfjJgp8kz
Hfi5Bpo1bjuO+t+B1/dd1wO7XH39YEUf/b+vznM4nUC+80F7Qj4aQp8IspxR
NUIe5+AE62JjEtsRJ4IbO7aeQv25kGWlGFPwjxDJoiUzsFOozVaH05jnGNa6
qmwFdgiX6ee3AX8Pt9eKssV8+4jbZQtn4TcW8W6XnT32s7tGk/LeAe87dm0/
wxEn9J+NPHe54Bz6RyMzxrach24b9f7kNRfwaBR9/Zwr/G2iD8naXkD/cLTr
vQ535LWOucd+2INCj/l4Nf8Svr8zscxTmy/DfzD2sFW4F+qtrl98N+sNHrz+
UNH6Ctgy7tPjd774Pj/HbeAn+oMt4lWicwPw9zcQf3mZ+yq+D/MbeU6hQcjb
f+NL73Qw2Cxh0zGrUPz9/W7eea0hDPsHEhSaxSKgb9qvx5hwDXr2edtji5HY
T/6+1zXLaHBrX3RzfQxF3o13GcWuU3zv6s+P3YjD+wX5N19biEd+zucDzRYJ
yJvzc4qxPhF8UIhOc08S6ttMeCPjb2Ge5XWJlvlk1E/XKzNZpEIPWTHSrLsN
nUvmXOTudOR75BjQEncH+ypkJjDNZ4Dfdj/UPH0X863WV0S+zkL/jEp7y677
2C/MZ5Qp7gHuyfNkQXMuG/2531iizHPw/kSBba21j+DXbijHvCsP862jjmld
z0f+2ZrTUX8f4/sLX7jQalaIebySYcy1RfDLP5uqJVqMeyimFUTFPoVfR2dt
6+wz5LFl/MhsVoL5c4d/atW8QH+E57+onS+hb3m8qS2mDHkKRnayzJYjjxKv
grbpK4r/3unpRVdXwu9suG2bSDX6F155scTUQI+cjdaeqUVevj13o0/VQS88
87ytqh75lZObWUQaoXe9HdCObkK/3brp6OlmvNfiIbo3Jq2YH+3Ou76qDX4C
jyR0hN9CL/qiHBP1DroKl/GbqXa8b7f2ufUmndjfIThAp/I96otPt+sY94JX
9m/TnfwMlhUYWPEYBDvTpuQtDsH//g9DU/8R3L+/nY2R5iv25XjR9iJ8DKyd
HmHH8h15QoJVOePHweWOhDrOn6ifPl7hnjoB/937vLZt/U3xe8gn237vD4lt
ianUk/6iU7hP5/c88cfTuC/TO/v+vbPIr/x8e1TJX3wPPre/HDg0j3nFV29/
r1qA/sPe+JbqEu4hpLtJrXkZ80xl383qrKL+Bm/Uvc411LcQ1A2MCRvJ86m/
UVP1U5FYj3jgTWWhFQ3Y7amPxVdaEv/3e5Syb70T3Uay32DAdPlvehJrEHns
CpwuMqJeT9tp8wIT5kVIizT5skCv5hn2pGKF38JaunDYBhKbE6W+nupi2og8
Dq2cwdfZ0Z/5pGMvBwf0nlsxg8mcJP7vf+/4H7vOz435GrbrFLN4MC9Qs2ZC
hBf8Qsrvdt4WzP/NdUBTih8ssjq78EwA9RYjRQ8PCCJPUrOzUeU26G8LRdep
bAfTJY0+bdwBP0XfTGttERKbED2tzTd27CTxf78fGjzVJ3eR2Jo4JtHl0rcb
+wpwxvFbiuH+RstabSPiJLYjxg7RX3GQxPyGxte7fkmR2IG49jig54I05u9L
PBQ+J4N7ufjMy12Rwz2zrZ6O/tsH/bOaa0KIPOZzie9RZjyIfLqbvk3GHIJ/
2GJWBjsR9ZVfLHRvKaL+bz3v6hYl3NNT+P3jsCO410JIlMWUMvbxGVXZYK6K
+hWVlaqGo/D3v/fMba867kmgOb8tTQP1QdbCnXSa8KOtHQi6oIU8YduSZPq1
kZ/hqu6omi70yEG6m0+Ow49Zqeoonz7mR2dcngszQH7Wf5IPp06gP87iu7H5
SdyXvTKTodEIeRP5T73ca4J6Lr+NTmmn8D0k9zfz0ptB36wQ1HrBnMT//R7d
Pujbfxr5+ZanxdQtkfeOad7AEyv0C5bZxPJZI3/WZr7D4TbgHd5df6Zs0Z/d
E51pbof9dsof1W+0xz1zbq1SSTvie9k9/7w4zQnz8o1cbOidUS9RIsLhfh73
KOL8UtfvgnnSl25dUneD37Ou4yLFF3AvOVmGj3wXkackoTo83APz5Ge85Kcv
wa/MYO+4+WXMVygeT2n0gn/lxixNaR/UK10wXU67gnvUtrPn0/shr6pUq7m7
P+obrgevHwgAa/w5VKl+FXlbdGddioOQV6sgfyt/CPK0rT/bHh6K99M9z391
OozETsT2tg97T0eg3kAsdrjxGrgrSi1BOgr7G/1cU0mPRv4ezRez9LHIZ5rr
+sD9OvR+RlGjgTjks3AcpNO4gfrBpuQXxQngM6L6Dvw3MX84nHFzRBJ02281
zdO3sM+Ymo/P6RSK3/ds6T1Nqbhnt+x5ptNp+D1Tef1wfCod9UX6w01hGRS/
h4N8OVvu4r7RLsbhRVmYv7gSb3f0PurtotqO9j3Afl2b6YVdH2J/5ZwjtLSP
8D0U7vMdSc7Ffnz1JbXi+fCPPDF1t/Yx8s8P7blqXAg/Wzc7q4ki+HWuZR6+
Wgz9cMwnAa5nyJ+/hWst9zl03ly9gcMvoIfLR1V0lYJnG+pvO5Yhn/VJwpW1
cvC7kYOmCa+QT8H90gHRKrxHLqGI51U1dJ7rP+b1a/F7E8ov/HHsNfTpPMuS
K/XYx+pg6k22Ror//jV1eTxown0OGW8wPNhC8fvw9ZjMu1Ywl0cIu+0bvE8I
ddXUwlvMn4pbbI9pxz0stsoWCXWC2x67XH/xHvkOKjxy0f4A/4ctIzpD3fDn
OCUg7tmD/EHfTFiY+/A9TF5K+JnxCflP075tkR1Af8sNhtzmz6iX36ZyzWKQ
4vex0M9hZgj33aRYqh4xgvcKbJsW4f8K/m0qTlc8Bj/zcfuvat8xr/lyVt2n
cYr/XtMN3HP7iXn3E7mD1/3CPuzbDaxTf2P/gCfRRyQnca+Jw42CdVNg07dU
hFMzqG8yV/jyaxb3lPvpWRk0R/HfB+8n6dwLyMfGMOGbv0hiZ6Jfkoj5kWXs
92PHmUPdK8hv8vQ277k17Ft/pHvx3z/4/3/RfQrV
          "]]}, {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0, 0, 1], 
          Dashing[Large], 
          Thickness[0.0025]], 
         LineBox[CompressedData["
1:eJxF13k0ld/XAPBLkkxJKkmSIk1IlOrZEpKkQjKnmwpRSCoKyZQkMyGZQ0JX
CUlRKTKTZCaZU4Yk+Uqv39s+3b9an7X32Weffc7TcleZ2eqcYqXRaH/YaLT/
/Tt+TnxoMtlRUfPPn5aZms9U1mh0ybPo5F2zIaVXIp+pYbNNkB+d8z/TSn91
Uo5n73AkPi/4f7u1tlO0ArbBPbYv/9+0062U6stnh/KvFv+NZ36kfN7aP5EK
LPkbL6ijFoaUdFvNlP71SC0VdUxYIOVM2V97VlBiG8+pfG4u/2vVUurB5Bv7
lfsq/zriFUUFMyZ7L6KViqmqDXdcM5PQjUXUiKmdL9Cq/tqykJJ7I5RgnIue
zKPaS3P7y/lr/lorh0penPHg4Tp0ZxZla5ZgE6KELsqgaNN+40Y2aL4sSkza
jDb4jsTjqcEr+q8rO9FK4dTjUk3vrJ9o+n1K1Wwbt5N47V+73aQswrgFOa6h
i8IousrcAcfbzLjR6O+nAxloWhCleWDYuLwZTU+iZOfWxfrL1WH8AbXxcZnd
Hw20HYMSP/56t91xdNEDSvB59mdtf7TbA2rG4fbaxf3omlwqTFdsm9iheqz3
hnq9SEGPWvHxrwPrqPwIe568hEY8fyPFWJFRvEWyGe+vhUpO6LvyMKMF59dB
Ra8V27JhSxuu/0T5njzK+3kfWusT5RgfMRBFR8d9og4vXxDH6Y8u6qQ4F0xz
D/ajaz5RThMfelNj2jH+iXrQpXpg0dxOPE8X5ZM1SQuy+/TXol3U+sr3Jzqd
P/2LV/RnvpW+gVbqovhET/lVxZP4J+q2f+1S7vfooi4q2TpN6rp81794sbiJ
icsUcSfV1cHje77wM86rjWKJKsw97dmN8Uaq/r977Mt60LQPVPJRvyOle3rQ
7ymnQvukS8nEtZTmKsPvEvN60aXUy6f8JTormd6qUxHluo3plR67lBssiF9R
RoeENw6dJ35NhS7/tZjVjfglxZH9aGBTBPELaqxbPMirlDib2pjFeuVOPXEe
Ze7ScTKrk+mWxZEKbZPM/GI17k65dX3oQOp26phU9w2mRXc9llwfRhxHpX04
L2YXx4y/YP2xeDqHmEF1m/ycXtTNjNt8z50wHCZOpX7ecByJnWLaTXT7YM/c
/n/9ceb++rxhIdOhB/LbzgkzvaL78sfctcQFlMzC6TIVRWY8P6Wg+MY+ZlxF
0eVFtS7TetYzWcbWxEWU8xta5PkI4mKK3eRl8NPE/n/3ETB2ze9PJtMJK+e4
3XzDzC91mmuROEZcRglIccq/1xz49x6Od/HOmZNCXE8NOlZPqz8ifk85LAic
8H9OXEf5UAsHheqZ8czwRbWyLIPoBmpKQzDWzJi4kbr5stk1sOsLupMSVrhr
+uL0V3QztYGxxujk7a//8ndIph/hfPP1Xz+K7P7152uYceVu28NtLUzvi9ui
zRhj5hsIPtPUE/2GrqEsApXVpw98+9f/RY4ylYQrxKVUyGTjjm8NTIc35D/V
7/r2776isqMVXn5lOibYNXf9L2IGlWBH3xrKNoym0ZIPKj/5vYA4jrq/cY2c
xXJmnNHft3mHLNPZb98xEoGZn5f0QJpn3/C/+gXutzIv6jLjhXTbTZ3HiIuo
V4ra6fush//1/1Z4y4bHF4f/3X9V44Sk9y2m63IaU4YjmOsbQvMlDJOY8TYt
1zUbnxFXUJ1S9MSwt0x3cyuL/akd/jffodK5onX9w//mO+75bsW9P8P/7tc1
7i0PxTWCbqXcXVP97i0h7qS8THy5FogRd1EvnLSX2ioQ91IT4YKrqw8Sd1PB
4tOSfwyJ+ymp7A4p6VPMfOcrtZtLrIgHqTLl13LH7Ii/UYKcT7b9vEA8RJnX
Ju8IuMKMs9J9lQq9iUeomG9n1YaDiEepHS7amivvMv2RS17nUCrxOMW3bvro
wxfEPyl1tdenF3wgnqS665Ntd3US/6LcTvhesP1CPEUJj529EjtB/B+V56Z9
rZplFD1DrXvWEREghXZjBbPG5KRhVRKfA1E/zjIOGZM4G2z11M65as50Hb98
wcNzxOxgEy/4qsOZeB5wykyXLPAh9eZD7c4VKltCmY7Yq/hCL46YC44dPrb9
cjpZzwUSx9yy7+YR88BXq3jpl8XE3JB98VVadw0xLzi7fxbnaCP1FoCKP1v8
hgF0ER9wRokLH/pB4guh7p7abXuWMYwvhMgsC/5wHrQSP9Cf+9x6ugzttgjW
vrvP0SaOpi2Cb/VlHjRZsl4A6oyMd/MrEC+CJ51fZlYrknwBiDB3LpBXJV4C
zkPcl/dqkP2WACfbITt/M7LfUohcHmT+4TKJCwJ97aNPk94kvgwkt7w3EQ4h
9YRgWHH8465Ysr8Q5GgsPnziAclfDi56W6u8c0n+ClA109+X9ppYBCT7+9gL
3jHNZeNYXFlN9heBb9853Ds+kPhKqHOK3DXaQvYTBXpQi7zCONPDqSs2XuX+
jl4F7FfFcuuWMi18ZK2yxGo0bTXIbthY6SSFVloN6iybDSq3o91Wg+lH+c+i
e0j+GriQscPGQYtYHPw8dv0qMWY6wVDVc7kFWS8OedL7Ftjak/oSUDX3YNQr
F9KPBHS36IgvuUHWS8J/WfqM06EkXxLYVzRfWBRF6q0Ffh+Tnc9jiSVhxfd2
msU9kr8OJE2Pv+V7QOLrQVHOXPtkDvE60OW0bs19yYwfu/A1/ngJ6Wc9WHXa
WnBVkn42wMX9Yxuf1JH8DXAtx2HMtJF4I0T4Obk8+kz23wiZZq4c7MOk3kYo
VvAIMZwicSlo5vURyZg7jvWloMeJs1uPC+0mBSPdfvdpC5mePrTANm0JWkka
5j0LktMVRovKQL51nt/IRRLfAv+9mPLb5oGO2wIUP9xyDSD5clCY9/IWdyrZ
Xx5o3Gz+h7PRdHlQPqbmH1WELpIHj0c+/p8qSP5WKJ5b7i/ZROpvhVPSQ7ya
HaTfbcBuyBNg20Pi2yDZXWpByBeyvwLsTT8UkDNK6ilA/we7Bc0/yXoF8PkT
FPD7N8nfDuvWPV6wiu0H9qcAZTr1AaqcaLftoPnLILBOjHgHVMe2BdJ3oot2
gN27GT7P3SS+E/i+rwxK2YumUZAlvHth+QF03E7QUTML+nYYrURBSGRSkDyd
GKB+qDfI+QxaFODCEg7+OHvSnyIsUVoX/NqR5CtCzmkN/j5Xsp8i6IdYB3N6
kf12QURvRrB2EMnfBc3bR4Ij7qJllGD5LdmQjvukvhKYdDqESOSga5QgZktu
yNlXaL7d0OH9KyS7Cq21G0Sbd4b+10zW7wazTa6hyn2kH2Xofs8aVvMHzVCG
Fx/VhNu5JvB8KhDR4pv4ZSnaTgW82jZajK1Au6mAfUfV+l+r0TUqYPrJ7tuf
dehOFdj/mf8RuwyargoKPdkXeLaiGaqwpk9vuwBF6qvCwoHJaSFlZnxmMKpo
lTpaZg80fmvfK62LjtsDj8bEqik6umgPxI4XB6uYk3w18Jsw19M4g9ZSA6dJ
DiFte9KfGphPpbXpO5L8vaA08+3kKU9y/r2wjHXLkH0gWmkvuC1UmX+/iOyn
DkaLrwfmVJB57AO5ZeVLixvJeffBquVnW8raSb4G8K5YEFvbTfL3w5RIllnj
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
/nT44gKlNJp5jZ7JIPwfySeAbQ==
          "]]}, {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0, 0, 1], 
          Thickness[0.0025]], 
         LineBox[CompressedData["
1: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
1KsQd1tS7z5wXsnGE+/IWF+psjn0kQvZvxeKrTV5Jj3QQvvgRNjZUHZfNNd+
GNg5Exp1j/S3H9zMuFdUJpJ4DVhzUyZsJI2cvx8qi4+tWJjLsNGoU5hYMdmv
AbGyJWHn6tDSB2DE73tYYQfp/wB45grw9vWS+g+A0MDu8J8DaOoBqF14inf9
GDpYE0y3eYSrTpJ1TUj0rAm//pnk14TxngURtD8kvyZ0PUnSf7boG+Y/CFXP
9gk+X4r2PAgZ/a9HxrnJ+iGIGryR+G4VmusQOI50bPm+EV1zCA6+5MlnlUYz
HQbFiULnZQpk/TCITOrt5KWggw8D95u5eQFVcv4R+P02umaDBjr+CLyboviI
H0HTjkDf++f7pXTRKkehYcZzqYIBiT8K+Z+EOylUhj251Zak1aCpOnBuxUR7
TiOpRwcM+K4FF7eT/Dqwf9Vm3Yfd6FwdkFvdtqq+j5x3DDjXLo/rGif1HINJ
oWNiIzMM14jczpqaR2vpQrT4oNwPtlk8Xxeubbk8x7R89t+6k8T6ysV86FFd
OC1Ze4VzDZqqC0ekzdT4NqAddGG3zKLFgpsYFpd70Cq8DR18HPgUDgRtlkXP
HIcFiu+0pXeiufRgaLdUP+xFxx+HYuX/qAe10bnHIXEPn4jOCbJfD4LVSib1
T6GZTsDlvSczTMxIvB7Y7P9pZ2mNVjkBJw7ckzlnT/o7AeoHlb/954wWOgHS
h8fK3C4x4tce9b589Srp/wTsW5vBWx1I5qUP9u+6M+Zvk3h98Om2vHj3HulX
H6LKfqjuSiT16kNmfBBnfyrp9yTUXhMeuJhN8p+Ep3bFySsLiQ3g7XHN80Vl
DP+mPKfoVpPzTsIKEUe2z/WkfwOwqKlVsBsk9RpA1namGQP5ObwvY6jjD6/4
vgvNZAxP/2y6FqWCHjWGt68qdHbsQwebwJ/HR9c9PYj2NAHxmItFK06guaig
bRN3SNsUzUYFS21Z/hkrdA0V3BSbXgadQ8+YQNB6w5xt/6GlqZDI+sGt3QWd
SoXSaa99Zz3QLqehvXclD7sP2U+F0Yr04dTr6CgqfE1QStt/C81/GoD3sqnc
G7SiGQSbvLCz+ErOM4Px9P2XIpm/Y34zCNJyY85ZjGYyB8VvmdealqGFzOHF
3ZFloyvQr80gcA9P+NxqxrrCpLoAtxA5zwJGAy/GbxZDK5rDDZl0MVUJNJsF
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
          "]]}}}, {
      DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{False, False}, {False, False}}, 
       FrameLabel -> {{None, None}, {None, None}}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImageSize -> 600, 
       Method -> {
        "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
         AbsolutePointSize[6], "ScalingFunctions" -> None}, 
       PlotRange -> {{0, 4.5}, {0., 1.9179933353279788`*^-10}}, 
       PlotRangeClipping -> True, PlotRangePadding -> {{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.05], 
          Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
      FormBox[
       TemplateBox[{
         TemplateBox[{
           RowBox[{
             RowBox[{"g", "(", "x", ")"}], "-", 
             RowBox[{"p", "(", 
               RowBox[{"6", ",", "x"}], ")"}]}]}, "Abs"], 
         TemplateBox[{
           RowBox[{
             RowBox[{"g", "(", "x", ")"}], "-", 
             RowBox[{"p", "(", 
               RowBox[{"7", ",", "x"}], ")"}]}]}, "Abs"], 
         TemplateBox[{
           RowBox[{
             RowBox[{"g", "(", "x", ")"}], "-", 
             RowBox[{"p", "(", 
               RowBox[{"8", ",", "x"}], ")"}]}]}, "Abs"]}, "LineLegend", 
        DisplayFunction -> (FormBox[
          StyleBox[
           StyleBox[
            PaneBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Tiny], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Tiny], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Large], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Large], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
              "Grid"], Alignment -> Left, AppearanceElements -> None, 
             ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
             "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
           FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
           False], TraditionalForm]& ), 
        InterpretationFunction :> (RowBox[{"LineLegend", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"Dashing", "[", "Tiny", "]"}], ",", 
                    RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}], ",", 
                 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"Dashing", "[", "Large", "]"}], ",", 
                    RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}], ",", 
                 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}]}], 
               "}"}], ",", 
             RowBox[{"{", 
               RowBox[{
                 TagBox[#, HoldForm], ",", 
                 TagBox[#2, HoldForm], ",", 
                 TagBox[#3, HoldForm]}], "}"}], ",", 
             RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
             RowBox[{"LabelStyle", "\[Rule]", 
               RowBox[{"{", "}"}]}], ",", 
             RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
        Editable -> True], TraditionalForm], TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], ",", 
   TemplateBox[{GraphicsBox[{{{}, {}, {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0, 0, 1], 
          Dashing[Tiny], 
          Thickness[0.0025]], 
         LineBox[CompressedData["
1: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
M8f/B3nvAQg=
          "]]}, {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0, 0, 1], 
          Dashing[Large], 
          Thickness[0.0025]], 
         LineBox[CompressedData["
1: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
REm7Df7MKnih/wF/oc4G
          "]]}, {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0, 0, 1], 
          Thickness[0.0025]], 
         LineBox[CompressedData["
1:eJwd2Hk4VV0XAPBrTIbIEJIMGe51b4iklLs2Soii2RCiCIWUUqGrvMhMkqSM
CQ2GEJIpyRgJGVKSTJkyz759vn94ftZe66y993n2OYeUjcvR88wkEskb/yB+
T1+WHZlP9aCTSLLuN8doUOGbeFjsyUkgkcQ2s2Nff5lJGo6zAxLjsmD6CA0O
Hlq3PXnGFUjGxc62wzQ4WpZv+iXuGpAkn2ioDdDgjJqd35qOJ5CaysO3/qbB
ztbAjugZBpB6+sIlftCgKKx3fHvNXVy/7uzudhqAgQb7xzg/IJXt3+HwhQaV
rJFbLFzvAYlPYWdODQ0MSodUpnSCgRRunipQToOmG1r6gcJhOL+sNuQtDaix
9ZnhM+G4H+2/kq9o4Hx9XsPCKhJI1k2nGxJpkHVcpkq+5j6QJk453X9Ag128
nt9L4qKBhFiYnW/S4MbIc/tA9hg8v4nTd51oUFzzdfKE6yMgKdstvjGngZYv
df2oThyQstbzOuyhge/ZU1EFr57gfuKCx+RoUEW/K+ErHI/r33SIEKBBqudo
bMhMAp5/d+KOYSroOd21vpKRiOvN0JVbqDBkKipnapWE5+tecvg9FWjqB7Jl
apLxfKVUx4KpkP0v7tO7uFRcv16wXooKR3tUQhJNnuP6nfk/WKkw/bn6qD97
Gh5vEiA8oAC7Xk53H3VNx/N/bLWWpgDFdobTQzov8XqndldIK4Dlid7CxnnC
vLVSaxRY0/G4nffqFa6X2v26kwLaUimcPsKZuN+9k6fCKNA36sUXPJOF5zvu
zT5OBrU/elOrR7Jxv+qyc5Vk8Psu0HY5A3tCPEAilgzydemPT1nl4PGLH7do
k8ExrVVuW80bfD/81h8PkIdxm+2aRXH5OG53e8+ULMTo9NVUr2JLJuiXFsgC
knl88pv1Wzyfm3XuXrIQ+YfDdVqmAPcDoV6ssrDzQl+S4qtCPJ7lt9p6GfC4
9Jgj+X0xkBKUHxqPSwGpmHX4gEs5tu+z+Nub4TjNWtkoAbtnL6dGjyikxb27
dvwLNomlsgNEwcTLjcVWtQLP58FPtCwMSfSeLYw5bJLv3ROOQrC//N2RotuV
2PNxM5J8ELNDOLo8C7ssP9praAOMJLp9r/6Fjaq1e8J44MEdisM3nY84zqNo
0MEJ/ToP70yvq8Lxr3VbrNkgoMotTzH8E76/NjZERE7TRa3P7J19j03KO+Y8
94+esXCw/P1fwn5vjr4do9fTxBsMD1ZjG4TIHeijn6lad0zQnfBYb6HQD/qY
1WR7VxLhnhXmhK90xsJ3y+Qmwr7FzMcq6Bvvf+pzXCWMgrd+i6In0XIcVWg1
2O2GSwGf6Dur4iYWTAkvh+rtbaOfXLi8HJBHeI+4+f0/9FirLYLPL9ZiZxvX
aMzQqQvssc6x2Iw93x62ztGLI/9J7Kom4lajSS6L9B8fq6gft9VhSzEJJa7R
pWmXdX53YjOOatxcYoUX8x/dJPQb8HokhNzdzgv7IrPm+69hW3Pd+qTOB5+p
j71fp2BLLg9qt/PBhKVroCbpM96/xK++wvyw8+PmJPO3hDuzY0MF4Uf128E6
/iZcX+GUnpko2D/gFuHw+YLX/+x7VSkpsNZhG/J4iO266htmIwVm/1YKh15h
K3+bP5UsBYZG4+Z1ndjWBhWy26RBha05PnRnM74/o8vdxbbB6tWH8kKD2Eh1
x/KIDMxLh8//t4ptrbNJVEYW/jUF1MwKfsXjDZgYZrLQR7vp1K6FbX2sZ9tH
Wajts8h8/Bh74lxicIQcPDgurS59pAV7MlWDjQyhzGIc989jGw/XbVQmQ0CW
QAeLJzZfhbaQGRlucrPd+pOGrRxwJ/YFGawrB0rSmFvxeRCveHk/BczcesJE
RVuJ+zfO6wIFjkl2WAcqYUvaFKYHUUDXs5b5ogV2ghbFvJECtJ2vdJXysbME
fZYOKYBc7zPhhHrsicK27gsKIBH+dJDvN7axS0+LrwLwj4QFTvK24fg74eVC
BeCODTC3lcNmaHRRvioAm54PrWUfNqnA2/6vAswnu33OcyDGo14eUSpMmjjF
yzGw+ehXripS4e+arevD6P/n+/VrU+GH+Qn+Gx+wlR3lhy5Q4dv6w7+HOrBd
3T9cv0mFpre6uWYT2FmHVniCqPBBYPfJfeLf8H50vDNKpwJ/8YuNUWrYjFw9
/gIq2JyTaPhrhG0scuv1R3x+ct8P0LHDTpg9JdVMBVIe+/7H3th8t8Yduqlg
fObm2mQ0EZc44z9AhXi2sSKDTOyssk8eE1QYe3X2WtInwplnNeepQD/ZumPx
J/ZE5YWWVSqEruqNmswT+VfkNFlp0J1anJbO147Pq87xaxw0oB1RPsdEwVZu
l/XhooHnXLKEqRY2SVTNnIcG9fHCXVmmRJwWzbqBBmJ6QdEcbtjGkQ2eOO44
sWpiHYjNaHT6gPOLYtx4CpKwXW/ytOP6nFr91bzvsMONzIvw9U2HTH3tv2L3
7OJ0XKNCWkQDlP7FRnZd/bj/+T1aS5tYO/D9eSZO+R8VDvbm5jtvwW5alTs4
SIXoQLJb1U5s9Piswg8q9KvEbd9qhE1igk68fmpdvEPu57EnAkpOVlHB9+7d
lAYvIi4zEo/Xv4U6ZyUbjc240JOH92dbi6OY12ts46dlMY+o4Ob5o62linB9
iV4AFSpkjkbSfmLzfRCtcqfCxoaPRr5z2K4U8Y02VMgSf1WpSu7E/RoHb1TH
+1clyQhC2JITjZ8kqHDEOWrv79PYPV+cjNbh/Sq5lRN5D5tP7291swJo2o9f
Gk4k4jy8ZfkKEMxrS9EuwiYFct17pABUa4OEf8PYZZXx980V4CZHibk+Sxeu
L/WrTUMBarN2CCeKYZO8Do+LKMAFJtFQY0MifjUy+QsFUpMGbmW+wrbmHldX
o8Csgbn6uipivKStNhcFDkx9nrT8gY34KNQeMvTp5Dts4P2O7yfqvid+ZJD6
43vqkis2cru4vUoe4uSlVamq3bj/k5E3NspB4LkzG37rY4c721I6ZcEjMWYo
1hpbOdJzJlEWjonxJnCGEvH4yiFFWeDkXeYeHsQ2bo68TpeBG7Ot/WlPf+Dr
mblOqEmDnerGCus8wg9/HP0nBcddDZ+I1GMnGG2eeiEFysMVxwIWsPkE385u
lYLB7swy++M/iedtUuK8BLzo3W8kwNaD12s0e/92MZD26dVw4cNGGWdUQzdD
jASDXCeGLSm8a3pUFPws3rHcVcG21n7CmiECNm07iiatiPGnGDxCm2Bz7Vb5
5iJsklODTTEfRFwoFlSsIuqfNnTm4QOOdWbMgV8Iy6k4vNsAszoPurUGifwI
gS3zXPDlPVdUttAvHF8743WWHfQs0n14pAjby7bOs0LJoq6LAw0b/bIQDmOB
l+p3DKR0iPjWoocFJAjInidFuP4irq9/iXmWrtDw1bbHE5vxWMznzyS9fvB1
ldI9Ik4dsAwdpzuzBlJuPyDMzKJ9ZIjOJ3k++HMiYTH3FZ7f9Jy9aFz8NWFX
y08POujHT4kdvVREuP7pVtFa+qzbbG5xFeGydDUJBv1h6Bdh7q//H6+aLFJN
353x8qb5T8Jx8emx7fTOj/7dGX8JC+rmRPXSt65oJuuz9mLzRryQHqenOmUo
+qsRfpDML7pM1/P/L6JNC5vhMpa/e40+nGQ9LXuY8K19wVQmUOzcVFRph42K
x7MOskKe3t0DzDGEJw8/uMoJlbIWFl6LhIf5GLoCYKelXlrP/huvV0SyMKsg
cJzhl94igC05wpteJgiGUdUDRVTsnpcaQbs2wVdmtSvzFtgkszgOQVHo/ckT
eKUUmyG7pyJoK/guDY5U1GEnRDrfU5UAOeHKI/ztRL0dOhEdEuB4+KZQ9gR2
ePKFzeGSMFncnzAm1YfPm9ioA3VSwBRb+tbBF5v04/KnDTKwzy4u8XY4tnFV
V6OxDFxTuRH0IA67TJqSESEDw7UqVuW52IzdzGW8stCy9Ixd9A+2JFPQ72VZ
2FB9Z0LxH+E/RaM75UAvyqpz/wpRv7A90UkO3tNEX7sK/cH1+R5Pt8hB6png
E9UHsJui20qj5aGH4gA/TLBdc+uiPsiD2OwByvQZbOR8cmxMHsJD15YlrmGX
JbmKa5Gh1ux7v9odbJLEgWF7MrDKFzYdCsUOZ9dQCCHDjVK3lOupxPjx7Mlm
MuQGHQkNySHsMuk2RYaxUzSP5BJsSYXGE/wUIMustymsxZ6oO/JQiQI2E38O
Nbb9Ib4fQlQPUSCuuELtTy/Rj0+23HkKfAuIl1gaI6y5cNGLAoZSplNy6/px
fU/Ul0YBv1G17n0C2E1WmzYUU6C8kP/TUQkirvnes4ECy/+NZ12gYpM+faF1
U2DX0fpYb3Vsvv1sYn8p4Lo13TdKhzDX1v1zFMgY/s854wi29eRcCpMC9OXb
nC4z7yf2y1eDE79v3AXtNntsRkk900YFMDuyhTZyBTt8amxOSAGixBaEmBlE
P+1Sm0UV4PNA65pwMHZCzpvzmxWAIzdnaHtMP3G+crXjuDYj7KtOCpGv+9xZ
WAG8DC++N83CnhiSlBdQgAIR/ecuxUR/hxTWuBVgsk824r9qbMmpsGlWBaBl
M9963ELMV2oP2xIF7Lx+nsvuIWxAVhqnQIJ+8eFPI0T+w1uuvyjQJfRod/c8
MT/bS5/w82BTr7v0FOsAXp+K4yplFDB+fZR7/UbsieVnmS8pEHhTaXarOHaZ
yJTmQwpU6nL37KRgu54e6bpNgVX+oRoDNezwcusAOwrs+fnxjbUWkZ9E18b7
efVF0pNrRthZolEcihR4ff22f7ApNl9sWOcGCgzqWFxOOk/ErzHejpJBmm+P
ecFlbGPHb09ryfAwbVKx7x42o1ImyJsMkvCGrPCAuP4Vf+vTZMhovSLtmoCd
IJrNwO+jJcwzQsv5xPVzmhK75EHvUR6vdgXRP7de8mt5+KJ0bX1AA7by3L2J
2/LQZzG3LNCH3RT5wlVcHpyn3s6ajhP9MU+nDMnB3D2PifhFYrxRh3yuHHC+
XfhN3TiI+2N5JL5fDpQ3Ltfq0LET1ONHjshC0fPiynv62GXMrws2yIIO3auk
8fgg8T3c/KNOBk46rWabO2GTQkK0tGTA8yPp0ZUYYvyrl4ki26D6Bpt98iRR
/4KNgackHOWrsh5awbbe6z8nJQldqX5mSuuHcL4+u3WwBIx9XXf4nQS2ZCFK
F9wKgoqcal8NscveMveyiMHZ3g0sLM+xe344HbMThGGPxmW9HGzU3z7iLwBX
ecNnQ98TZss0ec4PAfs2Dm9uIbzO4+1PPngdLfBFhWmY+H4e2XeZE3Zvb6n1
4MZGAkzXozig/ENUZYkwYdu/Orns0DIhVGCgiM3wStk2zAyLBiLxNuaExw/y
2s3SX1tu2hBnT1hAWp4ySbd1E/RqvYJN2nmY6/Nfuogf/8gGBuGgEhr6Ta9/
xGeuF0z4goH4sVY649WGWp8Ywsaz4aez6Grl3HvepRDeciPQoZY+3MKZNp1F
eLtDddAP+tNBDmHF94Qv8d+ZHaAfXWb3s6/5/3xUkk9M0Nfxsc0ktBL9C7I+
zp6mu6ozfRUYI+IW4wcvrtC1/RZCF7b+xb4w9c95Hcw+mltRoRI2ukZ5vB5e
vJq5eFEdWzKQwlrFBYKt/wx+HsHOurpdg4sP+rcNs39kYFuzTDQbCkJQead3
eC+28ta9ZS5bALW2j9aMYaO1kef24jA92GbBskTUc1pRsNgKlnxfNa4JjOD+
Oeq2iEuCslXdrPl+bL7Fdza9UtDnVnP+gTG261arUSNpeOT3qeWzBfbEyR8T
+dLA/PpDjpb7CDHfjHHGNmhZfucsn4odfo8R9k8GAviKuq1ziHqBlOcHZEFT
psAwtgRbRJuiGy0LqYdyFXi+YQcsesTQ5MDMKueR7m/swbWC9W5ywHsli4Mx
TtSv3O79Rg48Yl/2T64bBVJaGnWAIg+01xknaILYxtmZDyzl4Vd5WuV5Sexq
bYt3ofIQ3ZqqGk/DFtk0rFokDwZDKUntu7HLZEM7e+RhdTlpI/8Bwqnz95jJ
8IYvkXHIhPDKsS0SZLggEz/uewY7IF/HaRcZtux+YlniQPj67yN6+LzYdLtb
3h07fI28eowMMtPWFhEM7ITHltn4e5XcrN21GDRK3C+xehZkoGbJmJ17iC15
wD8Jny+KoewdDUlEvfN2T46QQeXi4Cn119jtmtzC+Pm4y6C2LaEQO2a4Z4RG
Bg3yyxOcH7Gbdvxc4icDnT205UoTNrnsvuSUPGj3uRzr7iLW4/wW9QZ50K0w
adYdwFY+Ii+WKA/6CaomWZPEehyYfO4sD4beQk2iq8T1fukXqMmDscXc4bvr
x4B0oSFAblYOjmt0NIwIYkvORtdnysFpkXeGJyWxT9cM3rWRA4vZuLpSKrar
o7fsBjmwbvE2oKhjtw/33suRhXM51jWR2kQ9BvUePr/sw7X1lo2wOd7NLvbJ
gKOzzKfzptjKRU75bjLgbMiu23gOm89mT+T8NrjGUauTdAt7t/4+lhFpuNn/
ooLLnxg/76xjKg1elSFa7pHYpKiphfdS4MswAb107DS3uM2XJCHAUrUkO5cY
71JwylkCgvcJaYqVYU881mWZEIf78+0aY22EHwj4F22G6LaiwlO9hKMinjGL
Qmxu3O7yUewe40cdu4QhydV6VxTrOJ7v30gWGwFIPaydt8KLjaIfqp/eCOk0
mZ32YtgM//DFyxsga3Bgh4YKds/9bIvLbJBbVZOVrEk4/+vTVyQoSHmhxKNP
5AuJ5F+foxffCXl97TiRX9XIfmmYXmrtsr3HCpsUXsibVUmvoJu81HciXH5+
pK2HXrVFlfrmGpG/1yWicYpeuyiYseUOkZ/gRYpZo39unyX7hWBLVhzY95sN
mvPbn4/HYCdcfWKqyA1tUUVypilEPZMMsVMbodvYW4b2DjvrS063vAiMVLNJ
Ng9iK59+UhW8DSZSB57uncbeLf7zVJgsTPvWiD9bI+JpQ38T5ME7oYpnH9cE
kDwqPvFNUuE/i0AuXmns/dmCYekq0LLNc8Nz+Qlivxb6fquC9N9LG2E7MT5S
3VZODUpumAi77Mb2vcZ0olIdZqNFtjUeJpxUf9deE/ZbcsrZH8cu4PMK76dD
pOwyec2U8N0GG3UEirk/FZXOYzf52Txs0AK7L6kaYbewnV3iO1UPQG5MjKa8
D3awS2e3qC4wWweiUj/sONe+VdaD8HTsku54BPauka29w3rwjUvt6JE07Krm
jbQ5Q9DT/eDA24rdYlMvu/EYRPPkXXzeie3IxH41+xj0taS6QA/2Yc6RoePH
gWEb6O7yF5vpZbP7sxNQwDDxaWT6BySlPQ4qzqeBXU/H134d9m+Dz7/IpnCc
V81/jRu7tlOXZ8AUJp6IhCiJYPcsGLE6mwPl3c+YMEVsU9usjOeW4HHny2P5
ndis3nxut62gSv/D09I92Fbmn/y3W4NNe2rK+P5/wNg38GVlw1mInbmUdcQc
x5ds9CeHbIBTefkTbwCOiwy/P8FmD2N5wf9JheJ4APl7z1N7+LJXXEc1Cse1
fqpv23sBYg7SS04m/CP+/3pl/JYDyFkxcp8UYH+ecIyWuAicf/jcMkvwePlM
p7rGizDqmKhUXonjBcp8K3cuQe61ioy+Juy1x4dvTjqDTihrInUIW/vTdecl
V5ATfGCpOf4PyrIHnJesLgNnrOyWIzO43vEfOdSqy9D8TPehG9MklKUKmtx7
6AbW7wNCCkUngWEoblR++Cp4jnDfPGgwCYg+auYv4AHWbk/UTY1x3G2lMi7K
A3Tmt884nsRxx7xnqcI3gJP1iGuoDa4Xbnrl1bab8Egswq71JvY6v81Sxz0h
30DomO2LSQgfPd1bHcKA2KZnfO7ZkyD5fGpS9ycDvE7u+uz3Ftu3a3xkhw/s
tzmln/EB5x9tbyvu9IHmG4/gX9ckNAVeSK/QuAvjaeK029xTwJC8aUBV94NF
gYR/ZP4p4EtJT6h74Afst6XfNgtPQfjm+/OPZvxgywl5bbltU6B8nym3rsAf
9Jh2nG7YMwXG3x/5fDG6B0mm+33F7KegTDgtqT83GF5VVul/vIjzP+vteicf
AgVK+rwubjhfKXPm7+MQ+Mx2OLbCC1/fgkXWOSAUlrJPZTlETUFCW2aV7J5w
OM7p9P1t+RRYr7EYbtKNBCv30cSzn6aAbJ7+QDwoEhx7XOy5GqagqWXPhZGm
SPDJvzpp2T4FpHe7zAcs78NrG28O9nEct5376+MbBeveRew8vmUa0kIm3jbM
RUORU0HwxLVp8EjdttchKA7MHnRwC3pN4/duKOSciYOlksVg9bvTEHC7KKvL
6gns49cM8Q6bhkGRPL1Ne55CaUF5CHfaNMSIxCTuWoyHSra6UHLHNIjk3rhX
9D0RziuNbDD8OQ3Wkj4FKWJJwG7KE+byZxqWp0JZ9pknwcGXR8Ly/01D9UGF
4Ovfk6D2aEvYfs4Z+H6fVdlgIBka47vDrffOwMukgV9JEqngWrPK56s1A9Zf
JXO4HFOBb0oi4vnBGahs7uXck5cKR3VtIsaOzUCUXumtAaPn0DLSH+F5cQay
7u/qLglIg849E5ExT2ZAr3PrWJHsC+j7yvygaW0GBj/TruzzzYIvrSmnv7HN
Qk7i9GXz/Cwo+aa75QfXLDgLkP5MDmZBTFdg8l/hWShrH4gNPZINh37z57Ar
z0KK9fqMCOkcyJmUbtxnPQt8HKmKIT1vIH66MlLHbhamK9n2P9mcC8GzdicN
Ls6CTVuo+M4TuWC3mNF9ymMWTsozOhbqckGUWXXELXwWXkZHdK+V5gFjo876
9LJZkDSW0GmoeAuXBP7UZ1bNguK9zG3FbAVgJuQfnl8/C3oqyvu19Atgp2id
cGX7LJDeGB/mby6AAcljcj8ncH/+Rjwjw4VwWNlWR0hqDubabbztNIpB/Mhd
Lx+fOdCokl1eeVEGKruE9SX950Blx7dHAy1loCv+QrA0eA52uqU/kVotA5e/
zS+WH87B9+lD7wNMyqHcX7rz+us5KLh9tEx5uRzOl5Xvcu6aA6aLSsnHz36A
VztIE2Zq81CVY/fyknMVVIhEvVvQmIfxqAge06QqaFuT949B89DSKEZ61lYF
aw1HtrYdmgdH/5AKa/QJTBzjDU1s5kHfwX35mkg1zCTR0w+GzcMdzQb+2K4a
0BT0stk5NA8rzyVr8rMboL8wc9BwfB6Oij9KN5lvgHCrXufzM/PAn+xbfwU+
Q1/GwVvRTAugXbVpwbjxMwRr8UfNiy5A51DFrO9MI3x3fv6x2GABPw8ydHQU
v4BnzRfygZcLIHQ0ndes4SvIubBmnslZgLmFqq1/Fr5Ck6C62rWCBRjYrypa
LtcCMtZxWs8rF2CTJHv0JZ8WqJ+1M1vfvQB23oUqzzRaYYvMclADzyKciXX2
ny5ug2JvufETLouQqbC59hRrJ4SuP+TF7r4IvYNKexV3d4JVlAvX25uLoHlV
FZ2+2AnMGQXyIn6LcHB7bGpaayfotRpYd8YtgmIe5Yzuyy5opbp8saxdBFtG
pm2zQzeMtb99Yy+7BO5v1rXej+qBMtvvWiLUJaiUOZMkmdsDEWOkpmrlJdDX
uSL042sP7GQ1GKHsW4IH4n9a/gr8gltK32VGji7BWds3YqbRv4DDjxTtyliC
pLAwn9cpvSClqu9xo2sJONbNZo0M9kGAJ3d58q8lqHom+liV/w9MfGxc/3lg
Cb6qj8YV7/0DJadPPpaeXoLfehuVosP+gJm3bUkd9zKM5KyFu2r0Q2SNF+tW
+jIE39Q7yfVkAFitc8IrEpZBqOAlKOPvQKd0946R1GUoKdgnbFk7DM2Tu6WF
Xy3DpKdZQ/vyMCT8V/rGqXAZNAOfa+Xb/IV9L+rbBJuXQbRt81ExlRFwn+3f
Ys+yAqXDNod+/hyF/mCxdC67FQhYf1dxungCHr22UhO9uAKW31qKUvF7hGFT
crmc2wpoqrMI+85PwBsBWqeW9woEqsyvlOLnPCN2H5dH9ArMldz/pJX5D8TS
zlzqq1oBz+zrTQ9fToLxh/gd7+VXge+cfv1QzTSw/Pn9vnb7Kkg2JaefGJ2G
fHayQbvqKrguzj6c5JsBcYMsmylYhaSI3htlp2dguKnsPuX0KlQ5sGzJGZ4B
3x+/Zh4ErMKb57GpYiJzULiwrch5aBUeSl4L8YtdgCiS2WHB8VXYXhXYkVG+
AM7rwnsLp1ch6NLcl7XBBZARWuZkI61Bcyb17r7dixCu3GL+eNMavEnT5GHv
WIQL9r4rn3TWYHGCxZxFZhk2tfYhqadroLFN/ORizyp+dm5urUpegxX+I/oR
G9agvtfY4WL6GtjwcTFZ7VuDOxPFEW9z10C3qfRefMwajHI96DWqW4MYqq1h
N4WEKrUP+N6cX4Ovi84T2sMktKe9+bcD/nuHG6N1gsGMJjU0g27QSMjys/jq
gyfMKOPJc5V7SiTEl8bQtCpiRpttPX3S1EhIedAgxHKaGS2OykoMaJHQQU7a
EUFHFlTMcsPsnBkJ6Vr3PbllwYqQksQXyyASor1rZOy2ZEfzEfc8nENJqO/K
+PXU2+woa3pKwjuChDiCTm7WTGRHUkXVzk8ektB2802LfX3siPmAG/f3ZBIa
dcw02+a8Dn0w+3jQtJiEhvh/PvUM4EC6fk4lx0ZJSCcu/2p+NyeK7PrsoDRB
Qi9J/Xb/mLjQD2UVIa4pEjJsUpA6LseFrnXNO1XMk9CpVSn3CBculKrsJ7qD
lQkJWlwzGWfhRuxdCVc3iDGh1hqZlhM7eVCVUptCjR4Tyuk1WCnP5UX8/+1p
SznEhGrpBuO7f/Aiy844H8ZhJvTWg8Q2xsKHZn1t29WPMyFbn7BnX7fzIbnO
if9SrZjQG6ZPKxl3+JCfL9evu9eYkKnVMWqs8kak24Ee0lOYUNHNptyVJ/yo
IPZcH9dzJjTMvrmAnMePFCwCdnSkM6HChY+7nOr50YafjXVXMpmQsO3Y+K4l
fvStz5KUXsSEfMKsTv01FUAXJjwdBL4woWsejofaxQRR4LrCvYMrTKhrcfXi
wRwhtFz9PSCPxIwWJm4Y+dULIedAUtsdFmb0p+UM589+IXSUR89VfD0z0rVC
F36IbUJiAt9Sjgoyo4R9f35s8t+EXm6d4XmvwIxsWS4rMmyE0We1HT0Rp5iR
p8WodsV2URR0MoUzzowZxbmuJg4aiSK968JqqWeYUeBa+GVlZ1FUUbByr8iW
GfXT+htkMkVR3t5a1d8uzMhBxtI1WWUzitOy9d8ZwIxo1o/U+ZAYcjR6oPit
gBkNZWl0OLiLI7bzC55bNrMgBSOzFmWyFDrpcf7F5BYWtM+VGuK9VwqlBn3p
qJZgQQID5+a7D0shvZz0Xe6yLOg7r7FIs7sU7sN0okGZBemul/0ZXimF+GKL
bG8fZEFX7GJTr5yXRpsbbxn0XmVB5yl95uS8bUhpz6pwWiMLkp70zlULk0O1
Lwq3vWtmQZnFrbln0uWQ3VZ3pc+tLKhqg/LFpx/kUBzLiO50Fwv6m2ao5zgv
hzg/d7ijQRbkWPohZ7utPOq3yfvaTmJFJWo5x69oklFc8MWw9Sqs6OnBfb23
2BTQ+p5OdqcoVuQs/CQlZ2A7qi05mevykBUleKk1MnMoouAnzWevxrKicDcL
VxeyIuIzry32SmBFC7VC5546KKJNbYVu4S9ZUUiQv+qJUUUkXR/zI6+SFama
qKSoLyohjYKT+aQZVmSneSh9u9AO5BjefD76BBtqGYplMsLPuNKzB4XtT7Oh
6Ns/uRb9VJGganG1ujkbCv5Fzst7hOOtz6gd1mzonrwJh2kpjovd+Cd2kQ1F
JflkGHPtRKXPJLwS77ChbXKX3nKl7kSC7y5GvcxkQ7lbPwdM9Kuh0j/sHyrW
s6PPFmlZ3jG7kfWmOpMmbnbk3sYbzZa9G5EOhvV087KjV4epLgk1uxFKE16d
F2JHKTxDivxLu1GZI3mPkjQ7Smt8oTtguQeVjetnPtZgR/Emfks2ChqofCH4
8VUndvQpsbZusWkv+sAjcFWugR3NqIbURVgBmlVuYic1sSPaXsY571uAFI6H
POpoZkf/6tV1bz8EFBm7rjS4nR15pnzcWNIIyEZ+ef3Ub3b07nfwfzGSCJG0
/sSXLrKjAOUpk6X7CNGvvq07TV6Hrj4IkE+/o4WKOs23Bd1dh1zvLojOMHTQ
nuxS7dO7ONBwbGOEw9RBZG+2lGcxz4HYCvd6q782QvfSrsjbvFqP/LxKg4TW
TJBZzYeRp5c5UWH+8cjbrCeRRJhx1ncyF4r8Pq9ZdsEMOVnO/77znQspGH5o
WrGxQvYkDyfreG5UlG73LqjJBp08uPMf/QQPSon24Auk2qFp6+ra45s3IBu/
9zNGpx3RZt/rgl+7NqBzsx3Ds9wuSClgpuBUzwYUo6r7d5Lmgv4HnAwBqQ==

          "]]}}}, {
      DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{False, False}, {False, False}}, 
       FrameLabel -> {{None, None}, {None, None}}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImageSize -> 600, 
       Method -> {
        "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
         AbsolutePointSize[6], "ScalingFunctions" -> None}, 
       PlotRange -> {{0, 4.5}, {0., 249.40465320311773`}}, PlotRangeClipping -> 
       True, PlotRangePadding -> {{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.05], 
          Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
      FormBox[
       TemplateBox[{
         TemplateBox[{
           RowBox[{
             RowBox[{"g", "(", "x", ")"}], "-", 
             RowBox[{"p", "(", 
               RowBox[{"6", ",", "x"}], ")"}]}]}, "Abs"], 
         TemplateBox[{
           RowBox[{
             RowBox[{"g", "(", "x", ")"}], "-", 
             RowBox[{"p", "(", 
               RowBox[{"7", ",", "x"}], ")"}]}]}, "Abs"], 
         TemplateBox[{
           RowBox[{
             RowBox[{"g", "(", "x", ")"}], "-", 
             RowBox[{"p", "(", 
               RowBox[{"8", ",", "x"}], ")"}]}]}, "Abs"]}, "LineLegend", 
        DisplayFunction -> (FormBox[
          StyleBox[
           StyleBox[
            PaneBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Tiny], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Tiny], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Large], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Dashing[Large], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Thickness[0.0225]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1], 
                    Thickness[0.0225]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
              "Grid"], Alignment -> Left, AppearanceElements -> None, 
             ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
             "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
           FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
           False], TraditionalForm]& ), 
        InterpretationFunction :> (RowBox[{"LineLegend", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"Dashing", "[", "Tiny", "]"}], ",", 
                    RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}], ",", 
                 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"Dashing", "[", "Large", "]"}], ",", 
                    RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}], ",", 
                 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"Thickness", "[", "0.0025`", "]"}]}], "]"}]}], 
               "}"}], ",", 
             RowBox[{"{", 
               RowBox[{
                 TagBox[#, HoldForm], ",", 
                 TagBox[#2, HoldForm], ",", 
                 TagBox[#3, HoldForm]}], "}"}], ",", 
             RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
             RowBox[{"LabelStyle", "\[Rule]", 
               RowBox[{"{", "}"}]}], ",", 
             RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
        Editable -> True], TraditionalForm], TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}], "}"}]], "Output",\

 CellChangeTimes->{{3.642181786528593*^9, 3.642181869515463*^9}, 
   3.6421822168723593`*^9, 3.642182908399845*^9, {3.642183097346081*^9, 
   3.642183159743009*^9}, {3.6421833809601307`*^9, 3.642183403286027*^9}, {
   3.642184203458783*^9, 3.642184215322029*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "can", " ", "compare", " ", "some", " ", "other", " ", "interpolation", " ",
    "schema"}], "*)"}]], "Input",
 CellChangeTimes->{{3.642181524616823*^9, 3.642181532914146*^9}, {
  3.6421834183049583`*^9, 3.642183421376191*^9}}],

Cell["\<\
Very much near exact for n - 1 > leading order of polynomial. Error does in \
fact grow with the larger orders as stated in this work. Turns out, the \
convergence properties of these functions are very good.  See the paper for \
more details. Anyway, now that it is clear that the interpolation scheme is \
useful, we can write a interpolation scheme for our low-rank kernel. We\
\[CloseCurlyQuote]ll stick to 1D for now\
\>", "Text",
 CellChangeTimes->{{3.642181308010833*^9, 3.642181325601075*^9}, {
  3.642181363462388*^9, 3.6421813767521353`*^9}, {3.64218150651055*^9, 
  3.642181539139061*^9}, {3.6421818805109167`*^9, 3.642181929949719*^9}, {
  3.642182041870105*^9, 3.642182079871254*^9}, {3.642182221590931*^9, 
  3.642182275132558*^9}, {3.6421829386772346`*^9, 3.642182982120769*^9}, {
  3.6421831719945917`*^9, 3.64218318088934*^9}, {3.642183294462219*^9, 
  3.642183298164035*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Low-rank kernel, Chebyshev interpolation", "Section",
 CellChangeTimes->{{3.642183429517355*^9, 3.642183445052589*^9}, {
  3.642188518876367*^9, 3.642188519235772*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"S", "[", 
   RowBox[{"n_", ",", "x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{
   FractionBox["1", "n"], "+", 
   RowBox[{
    FractionBox["2", "n"], 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ChebyshevT", "[", 
        RowBox[{"k", ",", "x"}], "]"}], 
       RowBox[{"ChebyshevT", "[", 
        RowBox[{"k", ",", "y"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"k", ",", "1", ",", 
        RowBox[{"n", "-", "1"}]}], "}"}]}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.6421836035002117`*^9, 3.642183636214319*^9}}],

Cell["Using (6) from this work, we can write", "Text",
 CellChangeTimes->{{3.642183454516614*^9, 3.642183460162528*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"xi_", ",", "n_", ",", "N0_"}], "]"}], ":=", 
  RowBox[{"Sum", "[", 
   RowBox[{
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{"Sum", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"S", "[", 
          RowBox[{"n", ",", 
           RowBox[{"xroots", "[", 
            RowBox[{"n", ",", "l"}], "]"}], ",", "xi"}], "]"}], 
         RowBox[{"Ke", "[", 
          RowBox[{
           RowBox[{"xroots", "[", 
            RowBox[{"n", ",", "l"}], "]"}], ",", 
           RowBox[{"yroots", "[", 
            RowBox[{"n", ",", "m"}], "]"}]}], "]"}], " ", 
         RowBox[{"\[Sigma]", "[", "j", "]"}], 
         RowBox[{"S", "[", 
          RowBox[{"n", ",", 
           RowBox[{"yroots", "[", 
            RowBox[{"n", ",", "m"}], "]"}], ",", 
           RowBox[{"y", "[", "j", "]"}]}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "1", ",", "N0"}], "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", "1", ",", "n"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"l", ",", "1", ",", "n"}], "}"}]}], "]"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"y", "[", "j", "]"}], " ", "and", " ", 
     RowBox[{"\[Sigma]", "[", "j", "]"}], " ", "need", " ", "to", " ", "be", 
     " ", "known"}], ",", " ", 
    RowBox[{
    "and", " ", "the", " ", "kernel", " ", "also", " ", "needs", " ", "to", 
     " ", "be", " ", "defined"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.642183468896757*^9, 3.642183584754056*^9}, {
  3.642183650091641*^9, 3.642183679676345*^9}, {3.6421837964223127`*^9, 
  3.642183815926774*^9}}],

Cell[TextData[{
 "for some source points ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "j"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and observation points ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". In order to implement the above sum, one needs to decompose the above \
triple sum in steps. First we find the weights at the Chebyshev nodes ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "m"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " (yroots[n,m]) by"
}], "Text",
 CellChangeTimes->{
  3.642182967913691*^9, {3.642183918523032*^9, 3.642183945046681*^9}, {
   3.6421840371606073`*^9, 3.6421840455747967`*^9}, {3.642184225167584*^9, 
   3.642184251380177*^9}, {3.642187215004991*^9, 3.6421872563958893`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"W", "[", 
   RowBox[{"N0_", ",", "n_", ",", "m_"}], "]"}], ":=", 
  RowBox[{"Sum", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Sigma]", "[", "j", "]"}], " ", 
     RowBox[{"S", "[", 
      RowBox[{"n", ",", 
       RowBox[{"yroots", "[", 
        RowBox[{"n", ",", "m"}], "]"}], ",", 
       RowBox[{"y", "[", "j", "]"}]}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", "N0"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.642187258545744*^9, 3.642187300178561*^9}}],

Cell[TextData[{
 "Next, we take that weight, and compute f(x) at each of the nodes to give ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", 
    SubscriptBox["x", "l"]}], TraditionalForm]]],
 "):"
}], "Text",
 CellChangeTimes->{{3.642187325864884*^9, 3.642187341829002*^9}, {
  3.642187422530479*^9, 3.642187428219816*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fnode", "[", 
   RowBox[{"l_", ",", "n_", ",", "N0_"}], "]"}], ":=", 
  RowBox[{"Sum", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"W", "[", 
      RowBox[{"N0", ",", "n", ",", "m"}], "]"}], 
     RowBox[{"Ke", "[", 
      RowBox[{
       RowBox[{"xroots", "[", 
        RowBox[{"n", ",", "l"}], "]"}], ",", 
       RowBox[{"yroots", "[", 
        RowBox[{"n", ",", "m"}], "]"}]}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", "1", ",", "n"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.642187392067829*^9, 3.642187490050611*^9}, {
  3.6421875763452168`*^9, 3.642187576646907*^9}}],

Cell[TextData[{
 "Finally, we compute the function f(x) at the observation points ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " by interpolation using ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["S", "n"], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.642187506309104*^9, 3.642187529234529*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"xi_", ",", "n_", ",", "N0_"}], "]"}], ":=", 
  RowBox[{"Sum", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"fnode", "[", 
      RowBox[{"l", ",", "n", ",", "N0"}], "]"}], 
     RowBox[{"S", "[", 
      RowBox[{"n", ",", 
       RowBox[{"xroots", "[", 
        RowBox[{"n", ",", "l"}], "]"}], ",", "xi"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"l", ",", "1", ",", "n"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.642187607379978*^9, 3.6421876234376373`*^9}, {
  3.642188179113491*^9, 3.6421882327938423`*^9}, {3.642188267298191*^9, 
  3.642188285839106*^9}, {3.642188321549267*^9, 3.64218834984713*^9}}],

Cell["\<\
This method has specific predictions for the computational cost of each step. \
We can test these if we know y[j], \[Sigma][j] and Ke[x,y].\
\>", "Text",
 CellChangeTimes->{{3.6421884205733423`*^9, 3.6421884715309677`*^9}, {
  3.642188510293874*^9, 3.642188511395103*^9}}],

Cell[CellGroupData[{

Cell["3D low-rank Chebyshev interpolation:", "Subsection",
 CellChangeTimes->{{3.642188516288178*^9, 3.642188528357897*^9}}],

Cell[TextData[{
 "The low-rank approximation of the kernel in 3D has nine summation indices \
for some target point {xt,yt,zt} and source point {xs,ys,zs} because the \
interpolation nodes themselves form a vector space. In the notation of the \
work we are studying, we use ",
 StyleBox["l",
  FontWeight->"Bold"],
 " \[Rule] {l1, l2 , l3} and ",
 StyleBox["m",
  FontWeight->"Bold"],
 "\[Rule] {m1, m2, m3} . It is a rather formidable sum."
}], "Text",
 CellChangeTimes->{{3.642188619425972*^9, 3.642188652263028*^9}, {
  3.6421887404087067`*^9, 3.642188757285742*^9}, {3.6421888943516912`*^9, 
  3.642188901324519*^9}, {3.642189111955632*^9, 3.642189177500519*^9}, {
  3.6421892333839083`*^9, 3.6421892379532223`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"R", "[", 
   RowBox[{
   "n_", ",", "xt_", ",", "yt_", ",", "zt_", ",", "xs_", ",", "ys_", ",", 
    "zs_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"S", "[", 
    RowBox[{"n", ",", "xt", ",", "xs"}], "]"}], 
   RowBox[{"S", "[", 
    RowBox[{"n", ",", "yt", ",", "ys"}], "]"}], 
   RowBox[{"S", "[", 
    RowBox[{"n", ",", "zt", ",", "zs"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.642188716885502*^9, 3.642188771039872*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"xtroot", "[", 
    RowBox[{"n_", ",", "l_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"2", "l"}], "-", "1"}], 
      RowBox[{"2", "n"}]], "\[Pi]"}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"ytroot", "[", 
    RowBox[{"n_", ",", "l_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"2", "l"}], "-", "1"}], 
      RowBox[{"2", "n"}]], "\[Pi]"}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"ztroot", "[", 
    RowBox[{"n_", ",", "l_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"2", "l"}], "-", "1"}], 
      RowBox[{"2", "n"}]], "\[Pi]"}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"xsroot", "[", 
    RowBox[{"n_", ",", "l_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"2", "l"}], "-", "1"}], 
      RowBox[{"2", "n"}]], "\[Pi]"}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"ysroot", "[", 
    RowBox[{"n_", ",", "l_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"2", "l"}], "-", "1"}], 
      RowBox[{"2", "n"}]], "\[Pi]"}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"zsroot", "[", 
    RowBox[{"n_", ",", "l_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"2", "l"}], "-", "1"}], 
      RowBox[{"2", "n"}]], "\[Pi]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6422542411789083`*^9, 3.642254264576535*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"LowRank3DKe", "[", 
   RowBox[{
   "n_", ",", "xt_", ",", "yt_", ",", "zt_", ",", "xs_", ",", "ys_", ",", 
    "zs_"}], "]"}], ":=", 
  RowBox[{"Sum", "[", 
   RowBox[{
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{"Sum", "[", 
       RowBox[{
        RowBox[{"Sum", "[", 
         RowBox[{
          RowBox[{"Sum", "[", 
           RowBox[{
            RowBox[{"Sum", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Ke", "[", 
                RowBox[{
                 RowBox[{"xtroot", "[", 
                  RowBox[{"n", ",", "l1"}], "]"}], ",", 
                 RowBox[{"ytroot", "[", 
                  RowBox[{"n", ",", "l2"}], "]"}], ",", 
                 RowBox[{"ztroot", "[", 
                  RowBox[{"n", ",", "l3"}], "]"}], ",", 
                 RowBox[{"xsroot", "[", 
                  RowBox[{"n", ",", "m1"}], "]"}], ",", 
                 RowBox[{"ysroot", "[", 
                  RowBox[{"n", ",", "m2"}], "]"}], ",", 
                 RowBox[{"zsroot", "[", 
                  RowBox[{"n", ",", "m3"}], "]"}]}], "]"}], 
               RowBox[{"R", "[", 
                RowBox[{"n", ",", 
                 RowBox[{"xtroot", "[", 
                  RowBox[{"n", ",", "l1"}], "]"}], ",", 
                 RowBox[{"ytroot", "[", 
                  RowBox[{"n", ",", "l2"}], "]"}], ",", 
                 RowBox[{"ztroot", "[", 
                  RowBox[{"n", ",", "l3"}], "]"}], ",", "xt", ",", "yt", ",", 
                 "zt"}], "]"}], 
               RowBox[{"R", "[", 
                RowBox[{"n", ",", 
                 RowBox[{"xsroot", "[", 
                  RowBox[{"n", ",", "m1"}], "]"}], ",", 
                 RowBox[{"ysroot", "[", 
                  RowBox[{"n", ",", "m2"}], "]"}], ",", 
                 RowBox[{"zsroot", "[", 
                  RowBox[{"n", ",", "m3"}], "]"}], ",", "xs", ",", "ys", ",", 
                 "zs"}], "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"l1", ",", "1", ",", "n"}], "}"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"l2", ",", "1", ",", "n"}], "}"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"l3", ",", "1", ",", "n"}], "}"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"m1", ",", "1", ",", "n"}], "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"m2", ",", "1", ",", "n"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"m3", ",", "1", ",", "n"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.642188531887704*^9, 3.642188615130817*^9}, {
   3.6421886621783047`*^9, 3.6421887154254208`*^9}, {3.642188920915812*^9, 
   3.642188982453641*^9}, {3.642189087959733*^9, 3.642189108618181*^9}, {
   3.642189210219221*^9, 3.642189227356814*^9}, 3.642189340204433*^9, {
   3.6421893849807863`*^9, 3.642189399980385*^9}, {3.642252806450034*^9, 
   3.642252874598628*^9}, {3.6422537534754457`*^9, 3.642253770259343*^9}, {
   3.6422540262787*^9, 3.642254030612084*^9}, {3.642254164201006*^9, 
   3.642254215136857*^9}, {3.642254280161763*^9, 3.64225432935526*^9}}],

Cell[TextData[{
 "We will implement a continuous kernel of dim 3 to test the predictions of \
the computational costs. Let\[CloseCurlyQuote]s use a ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    SuperscriptBox["r", "4"]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " kernel."
}], "Text",
 CellChangeTimes->{{3.6421890390261497`*^9, 3.642189061833053*^9}, {
  3.642254085916174*^9, 3.64225409687291*^9}, {3.6422550892307243`*^9, 
  3.6422550902439127`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Ke", "[", 
   RowBox[{
   "xt_", ",", "yt_", ",", "zt_", ",", "xs_", ",", "ys_", ",", "zs_"}], "]"}],
   ":=", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox["1", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"xt", "-", "xs"}], ")"}], "+", 
      RowBox[{"(", 
       RowBox[{"yt", "-", "ys"}], ")"}], "+", 
      RowBox[{"(", 
       RowBox[{"zt", "-", "zs"}], ")"}]}]], ")"}], "3"]}]], "Input",
 CellChangeTimes->{{3.6422540997588997`*^9, 3.642254160275096*^9}, {
   3.64225449633323*^9, 3.6422544983624496`*^9}, {3.642255035373932*^9, 
   3.642255039718361*^9}, 3.642256366490426*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LowRank3DKe", "[", 
  RowBox[{
  "3", ",", "xt", ",", "0.1", ",", "0.1", ",", "0.1", ",", "0.1", ",", 
   "0.1"}], "]"}]], "Input",
 CellChangeTimes->{{3.642255059992584*^9, 3.642255076998555*^9}, {
   3.642256347435502*^9, 3.642256354247373*^9}, 3.642256385904332*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Power", "::", "infy"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Infinite expression \[NoBreak]\\!\\(1\\/0\\)\[NoBreak] \
encountered. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/infy\\\", ButtonNote -> \
\\\"Power::infy\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.642256338751927*^9, 3.642256389252647*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "pkspec1"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"The expression \[NoBreak]\\!\\(\\@3\\/2\\)\[NoBreak] \
cannot be used as a part specification. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Part\\\", ButtonNote -> \
\\\"Part::pkspec1\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.642256338751927*^9, 3.6422563892746153`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "pkspec1"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"The expression \[NoBreak]\\!\\(\\@3\\/2\\)\[NoBreak] \
cannot be used as a part specification. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Part\\\", ButtonNote -> \
\\\"Part::pkspec1\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.642256338751927*^9, 3.642256389317666*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "pkspec1"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"The expression \[NoBreak]\\!\\(\\@3\\/2\\)\[NoBreak] \
cannot be used as a part specification. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Part\\\", ButtonNote -> \
\\\"Part::pkspec1\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.642256338751927*^9, 3.6422563893616743`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \[NoBreak]\\!\\(\\*StyleBox[\\(Part :: \
pkspec1\\), \\\"MessageName\\\"]\\)\[NoBreak] will be suppressed during this \
calculation. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/stop\\\", ButtonNote -> \
\\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.642256338751927*^9, 3.642256389403508*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\({\\(\\(\\(\[LeftSkeleton] 1 \
\[RightSkeleton]\\)\\) \[LeftDoubleBracket] \\(\\(3, \\@3\\/2, \\(\\(1 + \
xt\\)\\), 1\\)\\) \[RightDoubleBracket]\\)}\\)\[NoBreak] is neither a list of \
replacement rules nor a valid dispatch table, and so cannot be used for \
replacing. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\
\\\", ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/ReplaceAll/reps\\\
\", ButtonNote -> \\\"ReplaceAll::reps\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.642256338751927*^9, 3.642256390753427*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\({\\(\\(\\(\[LeftSkeleton] 1 \
\[RightSkeleton]\\)\\) \[LeftDoubleBracket] \\(\\(3, \\@3\\/2, xt, 1\\)\\) \
\[RightDoubleBracket]\\)}\\)\[NoBreak] is neither a list of replacement rules \
nor a valid dispatch table, and so cannot be used for replacing. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/ReplaceAll/reps\\\", \
ButtonNote -> \\\"ReplaceAll::reps\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.642256338751927*^9, 3.6422563921584167`*^9}}],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{{3.642256347818514*^9, 3.642256392416503*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Further work:", "Section",
 CellChangeTimes->{{3.642184236288196*^9, 3.642184237803562*^9}}],

Cell["\<\
Now we look into how to implement this interpolation scheme in 3D. Then \
further work will be done to extend the notion of N body particles to an N \
node finite element scheme and finally portability to a suitable FEM \
framework: libMesh. \
\>", "Text",
 CellChangeTimes->{3.642184244968628*^9}]
}, Closed]]
}, Open  ]]
},
WindowSize->{1855, 1056},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"10.1 for Linux x86 (64-bit) (March 23, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 144, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[727, 26, 138, 1, 96, "Title"],
Cell[CellGroupData[{
Cell[890, 31, 98, 1, 67, "Section"],
Cell[991, 34, 739, 26, 81, "Text"],
Cell[1733, 62, 658, 20, 64, "Input"],
Cell[2394, 84, 534, 15, 35, "Text"],
Cell[2931, 101, 773, 20, 59, "Input"],
Cell[3707, 123, 155, 3, 33, "Text"],
Cell[3865, 128, 624, 18, 64, "Input"],
Cell[4492, 148, 174, 4, 33, "Text"],
Cell[4669, 154, 457, 13, 64, "Input"],
Cell[5129, 169, 179, 4, 33, "Text"],
Cell[5311, 175, 461, 13, 32, "Input"],
Cell[5775, 190, 375, 10, 33, "Text"],
Cell[6153, 202, 475, 14, 32, "Input"],
Cell[6631, 218, 435, 14, 33, "Text"],
Cell[CellGroupData[{
Cell[7091, 236, 248, 7, 34, "Input"],
Cell[7342, 245, 664, 22, 34, "Output"]
}, Open  ]],
Cell[8021, 270, 281, 5, 33, "Text"],
Cell[8305, 277, 602, 17, 32, "Input"],
Cell[8910, 296, 132, 1, 33, "Text"],
Cell[9045, 299, 707, 21, 32, "Input"],
Cell[9755, 322, 1004, 27, 77, "Text"],
Cell[CellGroupData[{
Cell[10784, 353, 152, 3, 32, "Input"],
Cell[10939, 358, 181, 5, 34, "Output"]
}, Open  ]],
Cell[11135, 366, 390, 10, 33, "Text"],
Cell[CellGroupData[{
Cell[11550, 380, 1415, 37, 55, "Input"],
Cell[12968, 419, 78107, 1359, 239, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[91112, 1783, 96, 1, 47, "Subsection"],
Cell[91211, 1786, 311, 8, 33, "Text"],
Cell[CellGroupData[{
Cell[91547, 1798, 297, 8, 32, "Input"],
Cell[91847, 1808, 883, 26, 80, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[92767, 1839, 271, 8, 32, "Input"],
Cell[93041, 1849, 1686, 51, 160, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[94764, 1905, 271, 8, 32, "Input"],
Cell[95038, 1915, 2451, 74, 230, "Output"]
}, Open  ]],
Cell[97504, 1992, 499, 18, 46, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[98040, 2015, 100, 1, 39, "Subsection"],
Cell[98143, 2018, 129, 1, 33, "Text"],
Cell[CellGroupData[{
Cell[98297, 2023, 368, 10, 32, "Input"],
Cell[98668, 2035, 773, 22, 55, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[99478, 2062, 342, 10, 32, "Input"],
Cell[99823, 2074, 1512, 45, 142, "Output"]
}, Open  ]],
Cell[101350, 2122, 496, 18, 42, "Text"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[101895, 2146, 104, 1, 67, "Section"],
Cell[102002, 2149, 575, 16, 33, "Text"],
Cell[102580, 2167, 1293, 39, 58, "Input"],
Cell[103876, 2208, 389, 10, 33, "Text"],
Cell[104268, 2220, 707, 22, 56, "Input"],
Cell[104978, 2244, 161, 2, 33, "Text"],
Cell[105142, 2248, 967, 29, 58, "Input"],
Cell[106112, 2279, 392, 11, 33, "Text"],
Cell[CellGroupData[{
Cell[106529, 2294, 3318, 87, 137, "Input"],
Cell[109850, 2383, 43300, 861, 447, "Output"]
}, Open  ]],
Cell[153165, 3247, 110, 1, 33, "Text"],
Cell[CellGroupData[{
Cell[153300, 3252, 3472, 93, 130, "Input"],
Cell[156775, 3347, 124847, 2206, 381, "Output"]
}, Open  ]],
Cell[281637, 5556, 270, 6, 32, "Input"],
Cell[281910, 5564, 903, 14, 55, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[282850, 5583, 174, 2, 67, "Section"],
Cell[283027, 5587, 586, 18, 56, "Input"],
Cell[283616, 5607, 120, 1, 33, "Text"],
Cell[283739, 5610, 1631, 44, 55, "Input"],
Cell[285373, 5656, 815, 22, 35, "Text"],
Cell[286191, 5680, 529, 15, 32, "Input"],
Cell[286723, 5697, 324, 9, 33, "Text"],
Cell[287050, 5708, 634, 18, 32, "Input"],
Cell[287687, 5728, 402, 12, 33, "Text"],
Cell[288092, 5742, 674, 17, 32, "Input"],
Cell[288769, 5761, 282, 5, 33, "Text"],
Cell[CellGroupData[{
Cell[289076, 5770, 124, 1, 47, "Subsection"],
Cell[289203, 5773, 721, 15, 55, "Text"],
Cell[289927, 5790, 461, 13, 32, "Input"],
Cell[290391, 5805, 1638, 56, 105, "Input"],
Cell[292032, 5863, 3089, 70, 143, "Input"],
Cell[295124, 5935, 474, 12, 46, "Text"],
Cell[295601, 5949, 631, 18, 59, "Input"],
Cell[CellGroupData[{
Cell[296257, 5971, 293, 6, 32, "Input"],
Cell[296553, 5979, 469, 10, 50, "Message"],
Cell[297025, 5991, 484, 10, 57, "Message"],
Cell[297512, 6003, 482, 10, 57, "Message"],
Cell[297997, 6015, 484, 10, 57, "Message"],
Cell[298484, 6027, 554, 11, 23, "Message"],
Cell[299041, 6040, 696, 12, 57, "Message"],
Cell[299740, 6054, 682, 12, 57, "Message"],
Cell[300425, 6068, 101, 1, 32, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[300587, 6076, 98, 1, 67, "Section"],
Cell[300688, 6079, 308, 6, 33, "Text"]
}, Closed]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
